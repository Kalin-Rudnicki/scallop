Index.PACKAGES = {"org" : [], "org.rogach" : [], "org.rogach.scallop" : [{"name" : "org.rogach.scallop.ArgType", "shortDescription" : "An enumeration of possible arg types by number of arguments they can take.", "object" : "org\/rogach\/scallop\/ArgType$.html", "members_object" : [{"label" : "LIST", "tail" : ": V", "member" : "org.rogach.scallop.ArgType.LIST", "link" : "org\/rogach\/scallop\/ArgType$.html#LIST:org.rogach.scallop.ArgType.V", "kind" : "val"}, {"label" : "SINGLE", "tail" : ": V", "member" : "org.rogach.scallop.ArgType.SINGLE", "link" : "org\/rogach\/scallop\/ArgType$.html#SINGLE:org.rogach.scallop.ArgType.V", "kind" : "val"}, {"label" : "FLAG", "tail" : ": V", "member" : "org.rogach.scallop.ArgType.FLAG", "link" : "org\/rogach\/scallop\/ArgType$.html#FLAG:org.rogach.scallop.ArgType.V", "kind" : "val"}, {"label" : "V", "tail" : "", "member" : "org.rogach.scallop.ArgType.V", "link" : "org\/rogach\/scallop\/ArgType$.html#VextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ArgType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ArgType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ArgType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ArgType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ArgType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ArgType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ArgType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ArgType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ArgType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ArgType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ArgType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ArgType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ArgType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ArgType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ArgType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ArgType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ArgType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ArgType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ArgType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.CliOption", "trait" : "org\/rogach\/scallop\/CliOption.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/CliOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/CliOption.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/CliOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/CliOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/CliOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/CliOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/CliOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/CliOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/CliOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/CliOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/CliOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/CliOption.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/CliOption.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/CliOption.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/CliOption.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/CliOption.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/CliOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/CliOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/CliOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "helpInfo", "tail" : "(sh: List[Char]): List[HelpInfo]", "member" : "org.rogach.scallop.CliOption.helpInfo", "link" : "org\/rogach\/scallop\/CliOption.html#helpInfo(sh:List[Char]):List[org.rogach.scallop.HelpInfo]", "kind" : "abstract def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.CliOption.argLine", "link" : "org\/rogach\/scallop\/CliOption.html#argLine(sh:List[Char]):String", "kind" : "abstract def"}, {"label" : "hidden", "tail" : "(): Boolean", "member" : "org.rogach.scallop.CliOption.hidden", "link" : "org\/rogach\/scallop\/CliOption.html#hidden:Boolean", "kind" : "abstract def"}, {"label" : "default", "tail" : "(): () => Option[Any]", "member" : "org.rogach.scallop.CliOption.default", "link" : "org\/rogach\/scallop\/CliOption.html#default:()=>Option[Any]", "kind" : "abstract def"}, {"label" : "validator", "tail" : "(): (Any) => Boolean", "member" : "org.rogach.scallop.CliOption.validator", "link" : "org\/rogach\/scallop\/CliOption.html#validator:Any=>Boolean", "kind" : "abstract def"}, {"label" : "required", "tail" : "(): Boolean", "member" : "org.rogach.scallop.CliOption.required", "link" : "org\/rogach\/scallop\/CliOption.html#required:Boolean", "kind" : "abstract def"}, {"label" : "descr", "tail" : "(): String", "member" : "org.rogach.scallop.CliOption.descr", "link" : "org\/rogach\/scallop\/CliOption.html#descr:String", "kind" : "abstract def"}, {"label" : "name", "tail" : "(): String", "member" : "org.rogach.scallop.CliOption.name", "link" : "org\/rogach\/scallop\/CliOption.html#name:String", "kind" : "abstract def"}, {"label" : "converter", "tail" : "(): ValueConverter[_]", "member" : "org.rogach.scallop.CliOption.converter", "link" : "org\/rogach\/scallop\/CliOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "abstract def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.CliOption.isPositional", "link" : "org\/rogach\/scallop\/CliOption.html#isPositional:Boolean", "kind" : "abstract def"}, {"label" : "shortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.CliOption.shortNames", "link" : "org\/rogach\/scallop\/CliOption.html#shortNames:List[Char]", "kind" : "abstract def"}, {"label" : "requiredShortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.CliOption.requiredShortNames", "link" : "org\/rogach\/scallop\/CliOption.html#requiredShortNames:List[Char]", "kind" : "abstract def"}, {"label" : "longNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.CliOption.longNames", "link" : "org\/rogach\/scallop\/CliOption.html#longNames:List[String]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "org.rogach.scallop.Compat", "shortDescription" : "", "object" : "org\/rogach\/scallop\/Compat$.html", "members_object" : [{"label" : "exit", "tail" : "(code: Int): Nothing", "member" : "org.rogach.scallop.Compat.exit", "link" : "org\/rogach\/scallop\/Compat$.html#exit(code:Int):Nothing", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Compat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Compat$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Compat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Compat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Compat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Compat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Compat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Compat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Compat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Compat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Compat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Compat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/Compat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Compat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/Compat$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/Compat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Compat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Compat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Compat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.DefaultConverters", "trait" : "org\/rogach\/scallop\/DefaultConverters.html", "kind" : "trait", "members_trait" : [{"label" : "optDefault", "tail" : "(default: A)(conv: ValueConverter[A]): ValueConverter[A]", "member" : "org.rogach.scallop.DefaultConverters.optDefault", "link" : "org\/rogach\/scallop\/DefaultConverters.html#optDefault[A](default:A)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ValueConverter[A]", "kind" : "def"}, {"label" : "tallyConverter", "tail" : ": ValueConverter[Int]", "member" : "org.rogach.scallop.DefaultConverters.tallyConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#tallyConverter:org.rogach.scallop.ValueConverter[Int]", "kind" : "val"}, {"label" : "stringPropsConverter", "tail" : ": ValueConverter[Map[String, String]]", "member" : "org.rogach.scallop.DefaultConverters.stringPropsConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#stringPropsConverter:org.rogach.scallop.ValueConverter[Map[String,String]]", "kind" : "implicit val"}, {"label" : "charPropsConverter", "tail" : ": ValueConverter[Map[String, Char]]", "member" : "org.rogach.scallop.DefaultConverters.charPropsConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#charPropsConverter:org.rogach.scallop.ValueConverter[Map[String,Char]]", "kind" : "implicit val"}, {"label" : "doublePropsConverter", "tail" : ": ValueConverter[Map[String, Double]]", "member" : "org.rogach.scallop.DefaultConverters.doublePropsConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#doublePropsConverter:org.rogach.scallop.ValueConverter[Map[String,Double]]", "kind" : "implicit val"}, {"label" : "floatPropsConverter", "tail" : ": ValueConverter[Map[String, Float]]", "member" : "org.rogach.scallop.DefaultConverters.floatPropsConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#floatPropsConverter:org.rogach.scallop.ValueConverter[Map[String,Float]]", "kind" : "implicit val"}, {"label" : "longPropsConverter", "tail" : ": ValueConverter[Map[String, Long]]", "member" : "org.rogach.scallop.DefaultConverters.longPropsConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#longPropsConverter:org.rogach.scallop.ValueConverter[Map[String,Long]]", "kind" : "implicit val"}, {"label" : "intPropsConverter", "tail" : ": ValueConverter[Map[String, Int]]", "member" : "org.rogach.scallop.DefaultConverters.intPropsConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#intPropsConverter:org.rogach.scallop.ValueConverter[Map[String,Int]]", "kind" : "implicit val"}, {"label" : "shortPropsConverter", "tail" : ": ValueConverter[Map[String, Short]]", "member" : "org.rogach.scallop.DefaultConverters.shortPropsConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#shortPropsConverter:org.rogach.scallop.ValueConverter[Map[String,Short]]", "kind" : "implicit val"}, {"label" : "bytePropsConverter", "tail" : ": ValueConverter[Map[String, Byte]]", "member" : "org.rogach.scallop.DefaultConverters.bytePropsConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#bytePropsConverter:org.rogach.scallop.ValueConverter[Map[String,Byte]]", "kind" : "implicit val"}, {"label" : "propsConverter", "tail" : "(conv: ValueConverter[A]): ValueConverter[Map[String, A]]", "member" : "org.rogach.scallop.DefaultConverters.propsConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#propsConverter[A](conv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ValueConverter[Map[String,A]]", "kind" : "def"}, {"label" : "stringListConverter", "tail" : ": ValueConverter[List[String]]", "member" : "org.rogach.scallop.DefaultConverters.stringListConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#stringListConverter:org.rogach.scallop.ValueConverter[List[String]]", "kind" : "implicit val"}, {"label" : "doubleListConverter", "tail" : ": ValueConverter[List[Double]]", "member" : "org.rogach.scallop.DefaultConverters.doubleListConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#doubleListConverter:org.rogach.scallop.ValueConverter[List[Double]]", "kind" : "implicit val"}, {"label" : "floatListConverter", "tail" : ": ValueConverter[List[Float]]", "member" : "org.rogach.scallop.DefaultConverters.floatListConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#floatListConverter:org.rogach.scallop.ValueConverter[List[Float]]", "kind" : "implicit val"}, {"label" : "longListConverter", "tail" : ": ValueConverter[List[Long]]", "member" : "org.rogach.scallop.DefaultConverters.longListConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#longListConverter:org.rogach.scallop.ValueConverter[List[Long]]", "kind" : "implicit val"}, {"label" : "intListConverter", "tail" : ": ValueConverter[List[Int]]", "member" : "org.rogach.scallop.DefaultConverters.intListConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#intListConverter:org.rogach.scallop.ValueConverter[List[Int]]", "kind" : "implicit val"}, {"label" : "shortListConverter", "tail" : ": ValueConverter[List[Short]]", "member" : "org.rogach.scallop.DefaultConverters.shortListConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#shortListConverter:org.rogach.scallop.ValueConverter[List[Short]]", "kind" : "implicit val"}, {"label" : "byteListConverter", "tail" : ": ValueConverter[List[Byte]]", "member" : "org.rogach.scallop.DefaultConverters.byteListConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#byteListConverter:org.rogach.scallop.ValueConverter[List[Byte]]", "kind" : "implicit val"}, {"label" : "listArgConverter", "tail" : "(conv: (String) => A): ValueConverter[List[A]]", "member" : "org.rogach.scallop.DefaultConverters.listArgConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#listArgConverter[A](conv:String=>A):org.rogach.scallop.ValueConverter[List[A]]", "kind" : "def"}, {"label" : "finiteDurationConverter", "tail" : ": ValueConverter[FiniteDuration]", "member" : "org.rogach.scallop.DefaultConverters.finiteDurationConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#finiteDurationConverter:org.rogach.scallop.ValueConverter[scala.concurrent.duration.FiniteDuration]", "kind" : "implicit val"}, {"label" : "durationConverter", "tail" : ": ValueConverter[Duration]", "member" : "org.rogach.scallop.DefaultConverters.durationConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#durationConverter:org.rogach.scallop.ValueConverter[scala.concurrent.duration.Duration]", "kind" : "implicit val"}, {"label" : "bigDecimalConverter", "tail" : ": ValueConverter[BigDecimal]", "member" : "org.rogach.scallop.DefaultConverters.bigDecimalConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#bigDecimalConverter:org.rogach.scallop.ValueConverter[BigDecimal]", "kind" : "implicit val"}, {"label" : "bigIntConverter", "tail" : ": ValueConverter[BigInt]", "member" : "org.rogach.scallop.DefaultConverters.bigIntConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#bigIntConverter:org.rogach.scallop.ValueConverter[BigInt]", "kind" : "implicit val"}, {"label" : "doubleConverter", "tail" : ": ValueConverter[Double]", "member" : "org.rogach.scallop.DefaultConverters.doubleConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#doubleConverter:org.rogach.scallop.ValueConverter[Double]", "kind" : "implicit val"}, {"label" : "floatConverter", "tail" : ": ValueConverter[Float]", "member" : "org.rogach.scallop.DefaultConverters.floatConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#floatConverter:org.rogach.scallop.ValueConverter[Float]", "kind" : "implicit val"}, {"label" : "longConverter", "tail" : ": ValueConverter[Long]", "member" : "org.rogach.scallop.DefaultConverters.longConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#longConverter:org.rogach.scallop.ValueConverter[Long]", "kind" : "implicit val"}, {"label" : "intConverter", "tail" : ": ValueConverter[Int]", "member" : "org.rogach.scallop.DefaultConverters.intConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#intConverter:org.rogach.scallop.ValueConverter[Int]", "kind" : "implicit val"}, {"label" : "shortConverter", "tail" : ": ValueConverter[Short]", "member" : "org.rogach.scallop.DefaultConverters.shortConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#shortConverter:org.rogach.scallop.ValueConverter[Short]", "kind" : "implicit val"}, {"label" : "byteConverter", "tail" : ": ValueConverter[Byte]", "member" : "org.rogach.scallop.DefaultConverters.byteConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#byteConverter:org.rogach.scallop.ValueConverter[Byte]", "kind" : "implicit val"}, {"label" : "numberHandler", "tail" : "(name: String): PartialFunction[Throwable, Either[String, Option[T]]]", "member" : "org.rogach.scallop.DefaultConverters.numberHandler", "link" : "org\/rogach\/scallop\/DefaultConverters.html#numberHandler[T](name:String):PartialFunction[Throwable,Either[String,Option[T]]]", "kind" : "def"}, {"label" : "stringConverter", "tail" : ": ValueConverter[String]", "member" : "org.rogach.scallop.DefaultConverters.stringConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#stringConverter:org.rogach.scallop.ValueConverter[String]", "kind" : "implicit val"}, {"label" : "charConverter", "tail" : ": ValueConverter[Char]", "member" : "org.rogach.scallop.DefaultConverters.charConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#charConverter:org.rogach.scallop.ValueConverter[Char]", "kind" : "implicit val"}, {"label" : "singleArgConverter", "tail" : "(conv: (String) => A, handler: PartialFunction[Throwable, Either[String, Option[A]]]): ValueConverter[A]", "member" : "org.rogach.scallop.DefaultConverters.singleArgConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#singleArgConverter[A](conv:String=>A,handler:PartialFunction[Throwable,Either[String,Option[A]]]):org.rogach.scallop.ValueConverter[A]", "kind" : "def"}, {"label" : "flagConverter", "tail" : ": ValueConverter[Boolean]", "member" : "org.rogach.scallop.DefaultConverters.flagConverter", "link" : "org\/rogach\/scallop\/DefaultConverters.html#flagConverter:org.rogach.scallop.ValueConverter[Boolean]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/DefaultConverters.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/DefaultConverters.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/DefaultConverters.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/DefaultConverters.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/DefaultConverters.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/DefaultConverters.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/DefaultConverters.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/DefaultConverters.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/DefaultConverters.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/DefaultConverters.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/DefaultConverters.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/DefaultConverters.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/DefaultConverters.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/DefaultConverters.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/DefaultConverters.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/DefaultConverters.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/DefaultConverters.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/DefaultConverters.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/DefaultConverters.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.rogach.scallop.Formatter", "shortDescription" : "", "object" : "org\/rogach\/scallop\/Formatter$.html", "members_object" : [{"label" : "wrap", "tail" : "(s: Seq[String], width: Int): List[String]", "member" : "org.rogach.scallop.Formatter.wrap", "link" : "org\/rogach\/scallop\/Formatter$.html#wrap(s:Seq[String],width:Int):List[String]", "kind" : "def"}, {"label" : "format", "tail" : "(s: List[Option[HelpInfo]], width: Option[Int], appendDefault: Boolean): String", "member" : "org.rogach.scallop.Formatter.format", "link" : "org\/rogach\/scallop\/Formatter$.html#format(s:List[Option[org.rogach.scallop.HelpInfo]],width:Option[Int],appendDefault:Boolean):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Formatter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Formatter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Formatter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Formatter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Formatter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Formatter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Formatter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Formatter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Formatter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Formatter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Formatter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Formatter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/Formatter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Formatter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/Formatter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/Formatter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Formatter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Formatter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Formatter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.HelpInfo", "shortDescription" : "", "members_case class" : [{"member" : "org.rogach.scallop.HelpInfo#<init>", "error" : "unsupported entity"}, {"label" : "defaultValue", "tail" : ": () => Option[String]", "member" : "org.rogach.scallop.HelpInfo.defaultValue", "link" : "org\/rogach\/scallop\/HelpInfo.html#defaultValue:()=>Option[String]", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "org.rogach.scallop.HelpInfo.description", "link" : "org\/rogach\/scallop\/HelpInfo.html#description:String", "kind" : "val"}, {"label" : "argLine", "tail" : ": String", "member" : "org.rogach.scallop.HelpInfo.argLine", "link" : "org\/rogach\/scallop\/HelpInfo.html#argLine:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/HelpInfo.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/HelpInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/HelpInfo.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/HelpInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/HelpInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/HelpInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/HelpInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/HelpInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/HelpInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/HelpInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/HelpInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/HelpInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/HelpInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/HelpInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/HelpInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/HelpInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/HelpInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/HelpInfo.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.LazyMap", "shortDescription" : "A class, that lazily encapsulates a map inside.", "members_class" : [{"label" : "ImmutableKeySet", "tail" : "", "member" : "scala.collection.immutable.MapOps.ImmutableKeySet", "link" : "org\/rogach\/scallop\/LazyMap.html#ImmutableKeySetextendsAbstractSet[K]withMapOps.this.GenKeySetwithDefaultSerializable", "kind" : "class"}, {"label" : "GenKeySet", "tail" : "", "member" : "scala.collection.MapOps.GenKeySet", "link" : "org\/rogach\/scallop\/LazyMap.html#GenKeySetextendsAnyRef", "kind" : "trait"}, {"label" : "KeySet", "tail" : "", "member" : "scala.collection.MapOps.KeySet", "link" : "org\/rogach\/scallop\/LazyMap.html#KeySetextendsAbstractSet[K]withMapOps.this.GenKeySetwithDefaultSerializable", "kind" : "class"}, {"label" : "updated", "tail" : "(key: A, value: B1): Map[A, B1]", "member" : "org.rogach.scallop.LazyMap.updated", "link" : "org\/rogach\/scallop\/LazyMap.html#updated[B1>:B](key:A,value:B1):scala.collection.immutable.Map[A,B1]", "kind" : "def"}, {"label" : "removed", "tail" : "(key: A): Map[A, B]", "member" : "org.rogach.scallop.LazyMap.removed", "link" : "org\/rogach\/scallop\/LazyMap.html#removed(key:A):scala.collection.immutable.Map[A,B]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[(A, B)]", "member" : "org.rogach.scallop.LazyMap.iterator", "link" : "org\/rogach\/scallop\/LazyMap.html#iterator:Iterator[(A,B)]", "kind" : "def"}, {"label" : "get", "tail" : "(key: A): Option[B]", "member" : "org.rogach.scallop.LazyMap.get", "link" : "org\/rogach\/scallop\/LazyMap.html#get(key:A):Option[B]", "kind" : "def"}, {"member" : "org.rogach.scallop.LazyMap#<init>", "error" : "unsupported entity"}, {"label" : "withDefaultValue", "tail" : "(d: V1): Map[A, V1]", "member" : "scala.collection.immutable.Map.withDefaultValue", "link" : "org\/rogach\/scallop\/LazyMap.html#withDefaultValue[V1>:V](d:V1):scala.collection.immutable.Map[K,V1]", "kind" : "def"}, {"label" : "withDefault", "tail" : "(d: (A) => V1): Map[A, V1]", "member" : "scala.collection.immutable.Map.withDefault", "link" : "org\/rogach\/scallop\/LazyMap.html#withDefault[V1>:V](d:K=>V1):scala.collection.immutable.Map[K,V1]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[(A, B), (K2, V2)]): Map[K2, V2]", "member" : "scala.collection.immutable.Map.toMap", "link" : "org\/rogach\/scallop\/LazyMap.html#toMap[K2,V2](implicitev:(K,V)<:<(K2,V2)):scala.collection.immutable.Map[K2,V2]", "kind" : "final def"}, {"label" : "mapFactory", "tail" : "(): MapFactory[Map]", "member" : "scala.collection.immutable.Map.mapFactory", "link" : "org\/rogach\/scallop\/LazyMap.html#mapFactory:scala.collection.MapFactory[scala.collection.immutable.Map]", "kind" : "def"}, {"label" : "keySet", "tail" : "(): Set[A]", "member" : "scala.collection.immutable.MapOps.keySet", "link" : "org\/rogach\/scallop\/LazyMap.html#keySet:scala.collection.immutable.Set[K]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (A, B) => W): Map[A, W]", "member" : "scala.collection.immutable.MapOps.transform", "link" : "org\/rogach\/scallop\/LazyMap.html#transform[W](f:(K,V)=>W):CC[K,W]", "kind" : "def"}, {"label" : "+", "tail" : "(kv: (A, V1)): Map[A, V1]", "member" : "scala.collection.immutable.MapOps.+", "link" : "org\/rogach\/scallop\/LazyMap.html#+[V1>:V](kv:(K,V1)):CC[K,V1]", "kind" : "def"}, {"label" : "updatedWith", "tail" : "(key: A)(remappingFunction: (Option[B]) => Option[V1]): Map[A, V1]", "member" : "scala.collection.immutable.MapOps.updatedWith", "link" : "org\/rogach\/scallop\/LazyMap.html#updatedWith[V1>:V](key:K)(remappingFunction:Option[V]=>Option[V1]):CC[K,V1]", "kind" : "def"}, {"label" : "--", "tail" : "(keys: IterableOnce[A]): Map[A, B]", "member" : "scala.collection.immutable.MapOps.--", "link" : "org\/rogach\/scallop\/LazyMap.html#--(keys:scala.collection.IterableOnce[K]):C", "kind" : "final def"}, {"label" : "removedAll", "tail" : "(keys: IterableOnce[A]): Map[A, B]", "member" : "scala.collection.immutable.MapOps.removedAll", "link" : "org\/rogach\/scallop\/LazyMap.html#removedAll(keys:scala.collection.IterableOnce[K]):C", "kind" : "def"}, {"label" : "-", "tail" : "(key1: A, key2: A, keys: A*): Map[A, B]", "member" : "scala.collection.immutable.MapOps.-", "link" : "org\/rogach\/scallop\/LazyMap.html#-(key1:K,key2:K,keys:K*):C", "kind" : "def"}, {"label" : "-", "tail" : "(key: A): Map[A, B]", "member" : "scala.collection.immutable.MapOps.-", "link" : "org\/rogach\/scallop\/LazyMap.html#-(key:K):C", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Map.toString", "link" : "org\/rogach\/scallop\/LazyMap.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Map.stringPrefix", "link" : "org\/rogach\/scallop\/LazyMap.html#stringPrefix:String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.Map.hashCode", "link" : "org\/rogach\/scallop\/LazyMap.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "scala.collection.Map.equals", "link" : "org\/rogach\/scallop\/LazyMap.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.Map.canEqual", "link" : "org\/rogach\/scallop\/LazyMap.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: ((A, B)) => Boolean): WithFilter[A, B, [x]Iterable[x], [x, y]Map[x, y]]", "member" : "scala.collection.MapFactoryDefaults.withFilter", "link" : "org\/rogach\/scallop\/LazyMap.html#withFilter(p:((K,V))=>Boolean):scala.collection.MapOps.WithFilter[K,V,WithFilterCC,CC]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Map[A, B]", "member" : "scala.collection.MapFactoryDefaults.empty", "link" : "org\/rogach\/scallop\/LazyMap.html#empty:CC[K,V@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[(A, B), Map[A, B]]", "member" : "scala.collection.MapFactoryDefaults.newSpecificBuilder", "link" : "org\/rogach\/scallop\/LazyMap.html#newSpecificBuilder:scala.collection.mutable.Builder[(K,V@scala.annotation.unchecked.uncheckedVariance),CC[K,V@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: IterableOnce[(A, B)]): Map[A, B]", "member" : "scala.collection.MapFactoryDefaults.fromSpecific", "link" : "org\/rogach\/scallop\/LazyMap.html#fromSpecific(coll:scala.collection.IterableOnce[(K,V@scala.annotation.unchecked.uncheckedVariance)]):CC[K,V@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "++:", "tail" : "(that: IterableOnce[(A, V1)]): Map[A, V1]", "member" : "scala.collection.MapOps.++:", "link" : "org\/rogach\/scallop\/LazyMap.html#++:[V1>:V](that:scala.collection.IterableOnce[(K,V1)]):CC[K,V1]", "kind" : "def"}, {"label" : "+", "tail" : "(elem1: (A, V1), elem2: (A, V1), elems: (A, V1)*): Map[A, V1]", "member" : "scala.collection.MapOps.+", "link" : "org\/rogach\/scallop\/LazyMap.html#+[V1>:V](elem1:(K,V1),elem2:(K,V1),elems:(K,V1)*):CC[K,V1]", "kind" : "def"}, {"label" : "addString", "tail" : "(sb: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.MapOps.addString", "link" : "org\/rogach\/scallop\/LazyMap.html#addString(sb:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "++", "tail" : "(xs: IterableOnce[(A, V2)]): Map[A, V2]", "member" : "scala.collection.MapOps.++", "link" : "org\/rogach\/scallop\/LazyMap.html#++[V2>:V](xs:scala.collection.IterableOnce[(K,V2)]):CC[K,V2]", "kind" : "def"}, {"label" : "concat", "tail" : "(suffix: IterableOnce[(A, V2)]): Map[A, V2]", "member" : "scala.collection.MapOps.concat", "link" : "org\/rogach\/scallop\/LazyMap.html#concat[V2>:V](suffix:scala.collection.IterableOnce[(K,V2)]):CC[K,V2]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((A, B)) => IterableOnce[(K2, V2)]): Map[K2, V2]", "member" : "scala.collection.MapOps.flatMap", "link" : "org\/rogach\/scallop\/LazyMap.html#flatMap[K2,V2](f:((K,V))=>scala.collection.IterableOnce[(K2,V2)]):CC[K2,V2]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(A, B), (K2, V2)]): Map[K2, V2]", "member" : "scala.collection.MapOps.collect", "link" : "org\/rogach\/scallop\/LazyMap.html#collect[K2,V2](pf:PartialFunction[(K,V),(K2,V2)]):CC[K2,V2]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((A, B)) => (K2, V2)): Map[K2, V2]", "member" : "scala.collection.MapOps.map", "link" : "org\/rogach\/scallop\/LazyMap.html#map[K2,V2](f:((K,V))=>(K2,V2)):CC[K2,V2]", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(key: A): Boolean", "member" : "scala.collection.MapOps.isDefinedAt", "link" : "org\/rogach\/scallop\/LazyMap.html#isDefinedAt(key:K):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(key: A): Boolean", "member" : "scala.collection.MapOps.contains", "link" : "org\/rogach\/scallop\/LazyMap.html#contains(key:K):Boolean", "kind" : "def"}, {"label" : "default", "tail" : "(key: A): B", "member" : "scala.collection.MapOps.default", "link" : "org\/rogach\/scallop\/LazyMap.html#default(key:K):V", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: (B) => W): MapView[A, W]", "member" : "scala.collection.MapOps.mapValues", "link" : "org\/rogach\/scallop\/LazyMap.html#mapValues[W](f:V=>W):scala.collection.MapView[K,W]", "kind" : "def"}, {"label" : "filterKeys", "tail" : "(p: (A) => Boolean): MapView[A, B]", "member" : "scala.collection.MapOps.filterKeys", "link" : "org\/rogach\/scallop\/LazyMap.html#filterKeys(p:K=>Boolean):scala.collection.MapView[K,V]", "kind" : "def"}, {"label" : "foreachEntry", "tail" : "(f: (A, B) => U): Unit", "member" : "scala.collection.MapOps.foreachEntry", "link" : "org\/rogach\/scallop\/LazyMap.html#foreachEntry[U](f:(K,V)=>U):Unit", "kind" : "def"}, {"label" : "valuesIterator", "tail" : "(): Iterator[B]", "member" : "scala.collection.MapOps.valuesIterator", "link" : "org\/rogach\/scallop\/LazyMap.html#valuesIterator:Iterator[V]", "kind" : "def"}, {"label" : "keysIterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.MapOps.keysIterator", "link" : "org\/rogach\/scallop\/LazyMap.html#keysIterator:Iterator[K]", "kind" : "def"}, {"label" : "values", "tail" : "(): Iterable[B]", "member" : "scala.collection.MapOps.values", "link" : "org\/rogach\/scallop\/LazyMap.html#values:Iterable[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): Iterable[A]", "member" : "scala.collection.MapOps.keys", "link" : "org\/rogach\/scallop\/LazyMap.html#keys:Iterable[K]", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: K1, default: (K1) => V1): V1", "member" : "scala.collection.MapOps.applyOrElse", "link" : "org\/rogach\/scallop\/LazyMap.html#applyOrElse[K1<:K,V1>:V](x:K1,default:K1=>V1):V1", "kind" : "def"}, {"label" : "apply", "tail" : "(key: A): B", "member" : "scala.collection.MapOps.apply", "link" : "org\/rogach\/scallop\/LazyMap.html#apply(key:K):V", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(key: A, default: => V1): V1", "member" : "scala.collection.MapOps.getOrElse", "link" : "org\/rogach\/scallop\/LazyMap.html#getOrElse[V1>:V](key:K,default:=>V1):V1", "kind" : "def"}, {"label" : "mapFromIterable", "tail" : "(it: Iterable[(K2, V2)]): Map[K2, V2]", "member" : "scala.collection.MapOps.mapFromIterable", "link" : "org\/rogach\/scallop\/LazyMap.html#mapFromIterable[K2,V2](it:Iterable[(K2,V2)]):CC[K2,V2]", "kind" : "final def"}, {"label" : "valueStepper", "tail" : "(shape: StepperShape[B, S]): S", "member" : "scala.collection.MapOps.valueStepper", "link" : "org\/rogach\/scallop\/LazyMap.html#valueStepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[V,S]):S", "kind" : "def"}, {"label" : "keyStepper", "tail" : "(shape: StepperShape[A, S]): S", "member" : "scala.collection.MapOps.keyStepper", "link" : "org\/rogach\/scallop\/LazyMap.html#keyStepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[K,S]):S", "kind" : "def"}, {"label" : "view", "tail" : "(): MapView[A, B]", "member" : "scala.collection.MapOps.view", "link" : "org\/rogach\/scallop\/LazyMap.html#view:scala.collection.MapView[K,V]", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (B) => U): (A) => Boolean", "member" : "scala.PartialFunction.runWith", "link" : "org\/rogach\/scallop\/LazyMap.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "lift", "tail" : "(): (A) => Option[B]", "member" : "scala.PartialFunction.lift", "link" : "org\/rogach\/scallop\/LazyMap.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(k: PartialFunction[R, A]): PartialFunction[R, B]", "member" : "scala.PartialFunction.compose", "link" : "org\/rogach\/scallop\/LazyMap.html#compose[R](k:PartialFunction[R,A]):PartialFunction[R,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: PartialFunction[B, C]): PartialFunction[A, C]", "member" : "scala.PartialFunction.andThen", "link" : "org\/rogach\/scallop\/LazyMap.html#andThen[C](k:PartialFunction[B,C]):PartialFunction[A,C]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (B) => C): PartialFunction[A, C]", "member" : "scala.PartialFunction.andThen", "link" : "org\/rogach\/scallop\/LazyMap.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "org\/rogach\/scallop\/LazyMap.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "elementWise", "tail" : "(): ElementWiseExtractor[A, B]", "member" : "scala.PartialFunction.elementWise", "link" : "org\/rogach\/scallop\/LazyMap.html#elementWise:PartialFunction.ElementWiseExtractor[A,B]", "kind" : "def"}, {"label" : "unapply", "tail" : "(a: A): Option[B]", "member" : "scala.PartialFunction.unapply", "link" : "org\/rogach\/scallop\/LazyMap.html#unapply(a:A):Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => A): (A) => B", "member" : "scala.Function1.compose", "link" : "org\/rogach\/scallop\/LazyMap.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): IterableFactory[Iterable]", "member" : "scala.collection.immutable.Iterable.iterableFactory", "link" : "org\/rogach\/scallop\/LazyMap.html#iterableFactory:scala.collection.IterableFactory[scala.collection.immutable.Iterable]", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: Iterable[B]): LazyZip2[(A, B), B, LazyMap.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "org\/rogach\/scallop\/LazyMap.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "org\/rogach\/scallop\/LazyMap.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): LazyMap.this.type", "member" : "scala.collection.Iterable.seq", "link" : "org\/rogach\/scallop\/LazyMap.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "coll", "tail" : "(): LazyMap.this.type", "member" : "scala.collection.Iterable.coll", "link" : "org\/rogach\/scallop\/LazyMap.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): LazyMap.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "org\/rogach\/scallop\/LazyMap.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "++:", "tail" : "(that: IterableOnce[B]): Iterable[B]", "member" : "scala.collection.IterableOps.++:", "link" : "org\/rogach\/scallop\/LazyMap.html#++:[B>:A](that:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: ((A, B)) => U): Map[A, B]", "member" : "scala.collection.IterableOps.tapEach", "link" : "org\/rogach\/scallop\/LazyMap.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Map[A, B]]", "member" : "scala.collection.IterableOps.inits", "link" : "org\/rogach\/scallop\/LazyMap.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Map[A, B]]", "member" : "scala.collection.IterableOps.tails", "link" : "org\/rogach\/scallop\/LazyMap.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: ((A, B)) => (A1, A2, A3)): (Iterable[A1], Iterable[A2], Iterable[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "org\/rogach\/scallop\/LazyMap.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: ((A, B)) => (A1, A2)): (Iterable[A1], Iterable[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "org\/rogach\/scallop\/LazyMap.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterable[B], thisElem: A1, thatElem: B): Iterable[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "org\/rogach\/scallop\/LazyMap.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterable[((A, B), Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "org\/rogach\/scallop\/LazyMap.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): Iterable[((A, B), B)]", "member" : "scala.collection.IterableOps.zip", "link" : "org\/rogach\/scallop\/LazyMap.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: IterableOnce[B]): Iterable[B]", "member" : "scala.collection.IterableOps.++", "link" : "org\/rogach\/scallop\/LazyMap.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: IterableOnce[B]): Iterable[B]", "member" : "scala.collection.IterableOps.concat", "link" : "org\/rogach\/scallop\/LazyMap.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: ((A, B)) => Either[A1, A2]): (Iterable[A1], Iterable[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "org\/rogach\/scallop\/LazyMap.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(A, B), B]): Iterable[B]", "member" : "scala.collection.IterableOps.collect", "link" : "org\/rogach\/scallop\/LazyMap.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: ((A, B)) => IterableOnce[B]): Iterable[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "org\/rogach\/scallop\/LazyMap.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((A, B)) => IterableOnce[B]): Iterable[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "org\/rogach\/scallop\/LazyMap.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((A, B)) => B): Iterable[B]", "member" : "scala.collection.IterableOps.map", "link" : "org\/rogach\/scallop\/LazyMap.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: ((A, B), B) => B): Iterable[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "org\/rogach\/scallop\/LazyMap.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, (A, B)) => B): Iterable[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "org\/rogach\/scallop\/LazyMap.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): Iterable[B]", "member" : "scala.collection.IterableOps.scan", "link" : "org\/rogach\/scallop\/LazyMap.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: ((A, B)) => K)(f: ((A, B)) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "org\/rogach\/scallop\/LazyMap.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: ((A, B)) => K)(f: ((A, B)) => B): Map[K, Iterable[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "org\/rogach\/scallop\/LazyMap.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((A, B)) => K): Map[K, Map[A, B]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "org\/rogach\/scallop\/LazyMap.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Map[A, B]", "member" : "scala.collection.IterableOps.slice", "link" : "org\/rogach\/scallop\/LazyMap.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): Map[A, B]", "member" : "scala.collection.IterableOps.init", "link" : "org\/rogach\/scallop\/LazyMap.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): Map[A, B]", "member" : "scala.collection.IterableOps.tail", "link" : "org\/rogach\/scallop\/LazyMap.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Map[A, B]]", "member" : "scala.collection.IterableOps.sliding", "link" : "org\/rogach\/scallop\/LazyMap.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Map[A, B]]", "member" : "scala.collection.IterableOps.sliding", "link" : "org\/rogach\/scallop\/LazyMap.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Map[A, B]]", "member" : "scala.collection.IterableOps.grouped", "link" : "org\/rogach\/scallop\/LazyMap.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: ((A, B)) => Boolean): Map[A, B]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "org\/rogach\/scallop\/LazyMap.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Map[A, B]", "member" : "scala.collection.IterableOps.dropRight", "link" : "org\/rogach\/scallop\/LazyMap.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Map[A, B]", "member" : "scala.collection.IterableOps.drop", "link" : "org\/rogach\/scallop\/LazyMap.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: ((A, B)) => Boolean): (Map[A, B], Map[A, B])", "member" : "scala.collection.IterableOps.span", "link" : "org\/rogach\/scallop\/LazyMap.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: ((A, B)) => Boolean): Map[A, B]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "org\/rogach\/scallop\/LazyMap.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Map[A, B]", "member" : "scala.collection.IterableOps.takeRight", "link" : "org\/rogach\/scallop\/LazyMap.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Map[A, B]", "member" : "scala.collection.IterableOps.take", "link" : "org\/rogach\/scallop\/LazyMap.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Map[A, B], Map[A, B])", "member" : "scala.collection.IterableOps.splitAt", "link" : "org\/rogach\/scallop\/LazyMap.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: ((A, B)) => Boolean): (Map[A, B], Map[A, B])", "member" : "scala.collection.IterableOps.partition", "link" : "org\/rogach\/scallop\/LazyMap.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: ((A, B)) => Boolean): Map[A, B]", "member" : "scala.collection.IterableOps.filterNot", "link" : "org\/rogach\/scallop\/LazyMap.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: ((A, B)) => Boolean): Map[A, B]", "member" : "scala.collection.IterableOps.filter", "link" : "org\/rogach\/scallop\/LazyMap.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: ((A, B)) => Iterable[B]): Iterable[Iterable[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "org\/rogach\/scallop\/LazyMap.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[(A, B)]", "member" : "scala.collection.IterableOps.view", "link" : "org\/rogach\/scallop\/LazyMap.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "org\/rogach\/scallop\/LazyMap.html#sizeCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "org\/rogach\/scallop\/LazyMap.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.IterableOps.sizeCompare", "link" : "org\/rogach\/scallop\/LazyMap.html#sizeCompare(otherSize:Int):Int", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[(A, B)]", "member" : "scala.collection.IterableOps.lastOption", "link" : "org\/rogach\/scallop\/LazyMap.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): (A, B)", "member" : "scala.collection.IterableOps.last", "link" : "org\/rogach\/scallop\/LazyMap.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[(A, B)]", "member" : "scala.collection.IterableOps.headOption", "link" : "org\/rogach\/scallop\/LazyMap.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): (A, B)", "member" : "scala.collection.IterableOps.head", "link" : "org\/rogach\/scallop\/LazyMap.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[[_]Iterable[_]]", "member" : "scala.collection.IterableOps.companion", "link" : "org\/rogach\/scallop\/LazyMap.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): Map[A, B]", "member" : "scala.collection.IterableOps.repr", "link" : "org\/rogach\/scallop\/LazyMap.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "org\/rogach\/scallop\/LazyMap.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[(A, B)]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "org\/rogach\/scallop\/LazyMap.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): Iterable[(A, B)]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "org\/rogach\/scallop\/LazyMap.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "org\/rogach\/scallop\/LazyMap.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "org\/rogach\/scallop\/LazyMap.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[(A, B)]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "org\/rogach\/scallop\/LazyMap.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[(A, B)]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "org\/rogach\/scallop\/LazyMap.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[(A, B)]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "org\/rogach\/scallop\/LazyMap.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "org\/rogach\/scallop\/LazyMap.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[(A, B)]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "org\/rogach\/scallop\/LazyMap.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[(A, B)]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "org\/rogach\/scallop\/LazyMap.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[(A, B)]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "org\/rogach\/scallop\/LazyMap.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[(A, B), C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "org\/rogach\/scallop\/LazyMap.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "org\/rogach\/scallop\/LazyMap.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "org\/rogach\/scallop\/LazyMap.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "org\/rogach\/scallop\/LazyMap.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "org\/rogach\/scallop\/LazyMap.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "org\/rogach\/scallop\/LazyMap.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: ((A, B), B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "org\/rogach\/scallop\/LazyMap.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, (A, B)) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "org\/rogach\/scallop\/LazyMap.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[(A, B), B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "org\/rogach\/scallop\/LazyMap.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: ((A, B)) => B)(cmp: Ordering[B]): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "org\/rogach\/scallop\/LazyMap.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: ((A, B)) => B)(cmp: Ordering[B]): (A, B)", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "org\/rogach\/scallop\/LazyMap.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: ((A, B)) => B)(cmp: Ordering[B]): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "org\/rogach\/scallop\/LazyMap.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: ((A, B)) => B)(cmp: Ordering[B]): (A, B)", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "org\/rogach\/scallop\/LazyMap.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "org\/rogach\/scallop\/LazyMap.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): (A, B)", "member" : "scala.collection.IterableOnceOps.max", "link" : "org\/rogach\/scallop\/LazyMap.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "org\/rogach\/scallop\/LazyMap.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): (A, B)", "member" : "scala.collection.IterableOnceOps.min", "link" : "org\/rogach\/scallop\/LazyMap.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "org\/rogach\/scallop\/LazyMap.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "org\/rogach\/scallop\/LazyMap.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "org\/rogach\/scallop\/LazyMap.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "org\/rogach\/scallop\/LazyMap.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "org\/rogach\/scallop\/LazyMap.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "org\/rogach\/scallop\/LazyMap.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "org\/rogach\/scallop\/LazyMap.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "org\/rogach\/scallop\/LazyMap.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isEmpty", "link" : "org\/rogach\/scallop\/LazyMap.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: ((A, B), B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, (A, B)) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: ((A, B), B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, (A, B)) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "org\/rogach\/scallop\/LazyMap.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "org\/rogach\/scallop\/LazyMap.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "org\/rogach\/scallop\/LazyMap.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: ((A, B), B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "org\/rogach\/scallop\/LazyMap.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, (A, B)) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "org\/rogach\/scallop\/LazyMap.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: ((A, B), B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "org\/rogach\/scallop\/LazyMap.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, (A, B)) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "org\/rogach\/scallop\/LazyMap.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: ((A, B)) => Boolean): Option[(A, B)]", "member" : "scala.collection.IterableOnceOps.find", "link" : "org\/rogach\/scallop\/LazyMap.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: ((A, B)) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "org\/rogach\/scallop\/LazyMap.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: ((A, B)) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "org\/rogach\/scallop\/LazyMap.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: ((A, B)) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "org\/rogach\/scallop\/LazyMap.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((A, B)) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "org\/rogach\/scallop\/LazyMap.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "org\/rogach\/scallop\/LazyMap.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "org\/rogach\/scallop\/LazyMap.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[(A, B), S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "org\/rogach\/scallop\/LazyMap.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/LazyMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/LazyMap.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/LazyMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/LazyMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/LazyMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/LazyMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/LazyMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LazyMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LazyMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LazyMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/LazyMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/LazyMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/LazyMap.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/LazyMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/LazyMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/LazyMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/LazyMap.html", "kind" : "class"}, {"name" : "org.rogach.scallop.LongNamedPropertyOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[HelpInfo]", "member" : "org.rogach.scallop.LongNamedPropertyOption.helpInfo", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#helpInfo(sh:List[Char]):List[org.rogach.scallop.HelpInfo]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.LongNamedPropertyOption.argLine", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "required", "tail" : "(): Boolean", "member" : "org.rogach.scallop.LongNamedPropertyOption.required", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#required:Boolean", "kind" : "def"}, {"label" : "default", "tail" : "(): () => Some[Map[Nothing, Nothing]]", "member" : "org.rogach.scallop.LongNamedPropertyOption.default", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#default:()=>Some[scala.collection.immutable.Map[Nothing,Nothing]]", "kind" : "def"}, {"label" : "validator", "tail" : "(): (Any) => Boolean", "member" : "org.rogach.scallop.LongNamedPropertyOption.validator", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#validator:Any=>Boolean", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): Nil", "member" : "org.rogach.scallop.LongNamedPropertyOption.requiredShortNames", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#requiredShortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): Nil", "member" : "org.rogach.scallop.LongNamedPropertyOption.shortNames", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#shortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "longNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.LongNamedPropertyOption.longNames", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#longNames:List[String]", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.LongNamedPropertyOption.isPositional", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.LongNamedPropertyOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.LongNamedPropertyOption.hidden", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "valueName", "tail" : ": String", "member" : "org.rogach.scallop.LongNamedPropertyOption.valueName", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#valueName:String", "kind" : "val"}, {"label" : "keyName", "tail" : ": String", "member" : "org.rogach.scallop.LongNamedPropertyOption.keyName", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#keyName:String", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[_]", "member" : "org.rogach.scallop.LongNamedPropertyOption.converter", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.LongNamedPropertyOption.descr", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#descr:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.LongNamedPropertyOption.name", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/LongNamedPropertyOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/LongNamedPropertyOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.NumberArgOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[HelpInfo]", "member" : "org.rogach.scallop.NumberArgOption.helpInfo", "link" : "org\/rogach\/scallop\/NumberArgOption.html#helpInfo(sh:List[Char]):List[org.rogach.scallop.HelpInfo]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.NumberArgOption.argLine", "link" : "org\/rogach\/scallop\/NumberArgOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): Nil", "member" : "org.rogach.scallop.NumberArgOption.requiredShortNames", "link" : "org\/rogach\/scallop\/NumberArgOption.html#requiredShortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): Nil", "member" : "org.rogach.scallop.NumberArgOption.shortNames", "link" : "org\/rogach\/scallop\/NumberArgOption.html#shortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "longNames", "tail" : "(): Nil", "member" : "org.rogach.scallop.NumberArgOption.longNames", "link" : "org\/rogach\/scallop\/NumberArgOption.html#longNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.NumberArgOption.isPositional", "link" : "org\/rogach\/scallop\/NumberArgOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.NumberArgOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.NumberArgOption.hidden", "link" : "org\/rogach\/scallop\/NumberArgOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "default", "tail" : ": () => Option[Long]", "member" : "org.rogach.scallop.NumberArgOption.default", "link" : "org\/rogach\/scallop\/NumberArgOption.html#default:()=>Option[Long]", "kind" : "val"}, {"label" : "validator", "tail" : ": (Any) => Boolean", "member" : "org.rogach.scallop.NumberArgOption.validator", "link" : "org\/rogach\/scallop\/NumberArgOption.html#validator:Any=>Boolean", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[Long]", "member" : "org.rogach.scallop.NumberArgOption.converter", "link" : "org\/rogach\/scallop\/NumberArgOption.html#converter:org.rogach.scallop.ValueConverter[Long]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.NumberArgOption.descr", "link" : "org\/rogach\/scallop\/NumberArgOption.html#descr:String", "kind" : "val"}, {"label" : "required", "tail" : ": Boolean", "member" : "org.rogach.scallop.NumberArgOption.required", "link" : "org\/rogach\/scallop\/NumberArgOption.html#required:Boolean", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.NumberArgOption.name", "link" : "org\/rogach\/scallop\/NumberArgOption.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/NumberArgOption.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/NumberArgOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/NumberArgOption.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/NumberArgOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/NumberArgOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/NumberArgOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/NumberArgOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/NumberArgOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/NumberArgOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/NumberArgOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/NumberArgOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/NumberArgOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/NumberArgOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/NumberArgOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/NumberArgOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/NumberArgOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/NumberArgOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/NumberArgOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.overrideColorOutput", "shortDescription" : "", "object" : "org\/rogach\/scallop\/overrideColorOutput$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.util.DynamicVariable.toString", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#toString():String", "kind" : "def"}, {"label" : "value_=", "tail" : "(newval: Option[Boolean]): Unit", "member" : "scala.util.DynamicVariable.value_=", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#value_=(newval:T):Unit", "kind" : "def"}, {"label" : "withValue", "tail" : "(newval: Option[Boolean])(thunk: => S): S", "member" : "scala.util.DynamicVariable.withValue", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#withValue[S](newval:T)(thunk:=>S):S", "kind" : "def"}, {"label" : "value", "tail" : "(): Option[Boolean]", "member" : "scala.util.DynamicVariable.value", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#value:T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/overrideColorOutput$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.PropertyOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[HelpInfo]", "member" : "org.rogach.scallop.PropertyOption.helpInfo", "link" : "org\/rogach\/scallop\/PropertyOption.html#helpInfo(sh:List[Char]):List[org.rogach.scallop.HelpInfo]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.PropertyOption.argLine", "link" : "org\/rogach\/scallop\/PropertyOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "required", "tail" : "(): Boolean", "member" : "org.rogach.scallop.PropertyOption.required", "link" : "org\/rogach\/scallop\/PropertyOption.html#required:Boolean", "kind" : "def"}, {"label" : "default", "tail" : "(): () => Some[Map[Nothing, Nothing]]", "member" : "org.rogach.scallop.PropertyOption.default", "link" : "org\/rogach\/scallop\/PropertyOption.html#default:()=>Some[scala.collection.immutable.Map[Nothing,Nothing]]", "kind" : "def"}, {"label" : "validator", "tail" : "(): (Any) => Boolean", "member" : "org.rogach.scallop.PropertyOption.validator", "link" : "org\/rogach\/scallop\/PropertyOption.html#validator:Any=>Boolean", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.PropertyOption.requiredShortNames", "link" : "org\/rogach\/scallop\/PropertyOption.html#requiredShortNames:List[Char]", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.PropertyOption.shortNames", "link" : "org\/rogach\/scallop\/PropertyOption.html#shortNames:List[Char]", "kind" : "def"}, {"label" : "longNames", "tail" : "(): Nil", "member" : "org.rogach.scallop.PropertyOption.longNames", "link" : "org\/rogach\/scallop\/PropertyOption.html#longNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.PropertyOption.isPositional", "link" : "org\/rogach\/scallop\/PropertyOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.PropertyOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.PropertyOption.hidden", "link" : "org\/rogach\/scallop\/PropertyOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "valueName", "tail" : ": String", "member" : "org.rogach.scallop.PropertyOption.valueName", "link" : "org\/rogach\/scallop\/PropertyOption.html#valueName:String", "kind" : "val"}, {"label" : "keyName", "tail" : ": String", "member" : "org.rogach.scallop.PropertyOption.keyName", "link" : "org\/rogach\/scallop\/PropertyOption.html#keyName:String", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[_]", "member" : "org.rogach.scallop.PropertyOption.converter", "link" : "org\/rogach\/scallop\/PropertyOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.PropertyOption.descr", "link" : "org\/rogach\/scallop\/PropertyOption.html#descr:String", "kind" : "val"}, {"label" : "short", "tail" : ": Char", "member" : "org.rogach.scallop.PropertyOption.short", "link" : "org\/rogach\/scallop\/PropertyOption.html#short:Char", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.PropertyOption.name", "link" : "org\/rogach\/scallop\/PropertyOption.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/PropertyOption.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/PropertyOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/PropertyOption.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/PropertyOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/PropertyOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/PropertyOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/PropertyOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/PropertyOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/PropertyOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/PropertyOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/PropertyOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/PropertyOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/PropertyOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/PropertyOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/PropertyOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/PropertyOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/PropertyOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/PropertyOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.Scallop", "shortDescription" : "The main builder class.", "members_case class" : [{"label" : "filteredSummary", "tail" : "(blurred: Set[String]): String", "member" : "org.rogach.scallop.Scallop.filteredSummary", "link" : "org\/rogach\/scallop\/Scallop.html#filteredSummary(blurred:Set[String]):String", "kind" : "def"}, {"label" : "summary", "tail" : "(): String", "member" : "org.rogach.scallop.Scallop.summary", "link" : "org\/rogach\/scallop\/Scallop.html#summary:String", "kind" : "def"}, {"label" : "verify", "tail" : "(): Scallop", "member" : "org.rogach.scallop.Scallop.verify", "link" : "org\/rogach\/scallop\/Scallop.html#verify:org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "getVersionOption", "tail" : ": Option[CliOption]", "member" : "org.rogach.scallop.Scallop.getVersionOption", "link" : "org\/rogach\/scallop\/Scallop.html#getVersionOption:Option[org.rogach.scallop.CliOption]", "kind" : "lazy val"}, {"label" : "getHelpOption", "tail" : ": CliOption", "member" : "org.rogach.scallop.Scallop.getHelpOption", "link" : "org\/rogach\/scallop\/Scallop.html#getHelpOption:org.rogach.scallop.CliOption", "kind" : "lazy val"}, {"label" : "prop", "tail" : "(name: Char, key: String): Option[Any]", "member" : "org.rogach.scallop.Scallop.prop", "link" : "org\/rogach\/scallop\/Scallop.html#prop(name:Char,key:String):Option[Any]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: Char): Any", "member" : "org.rogach.scallop.Scallop.apply", "link" : "org\/rogach\/scallop\/Scallop.html#apply(name:Char):Any", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String): Any", "member" : "org.rogach.scallop.Scallop.apply", "link" : "org\/rogach\/scallop\/Scallop.html#apply(name:String):Any", "kind" : "def"}, {"label" : "get", "tail" : "(name: Char): Option[Any]", "member" : "org.rogach.scallop.Scallop.get", "link" : "org\/rogach\/scallop\/Scallop.html#get(name:Char):Option[Any]", "kind" : "def"}, {"label" : "get", "tail" : "(name: String): Option[Any]", "member" : "org.rogach.scallop.Scallop.get", "link" : "org\/rogach\/scallop\/Scallop.html#get(name:String):Option[Any]", "kind" : "def"}, {"label" : "isSupplied", "tail" : "(name: String): Boolean", "member" : "org.rogach.scallop.Scallop.isSupplied", "link" : "org\/rogach\/scallop\/Scallop.html#isSupplied(name:String):Boolean", "kind" : "def"}, {"label" : "args", "tail" : "(a: Seq[String]): Scallop", "member" : "org.rogach.scallop.Scallop.args", "link" : "org\/rogach\/scallop\/Scallop.html#args(a:Seq[String]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "printHelp", "tail" : "(): Unit", "member" : "org.rogach.scallop.Scallop.printHelp", "link" : "org\/rogach\/scallop\/Scallop.html#printHelp():Unit", "kind" : "def"}, {"label" : "help", "tail" : "(): String", "member" : "org.rogach.scallop.Scallop.help", "link" : "org\/rogach\/scallop\/Scallop.html#help:String", "kind" : "def"}, {"label" : "setHelpWidth", "tail" : "(w: Int): Scallop", "member" : "org.rogach.scallop.Scallop.setHelpWidth", "link" : "org\/rogach\/scallop\/Scallop.html#setHelpWidth(w:Int):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "footer", "tail" : "(f: String): Scallop", "member" : "org.rogach.scallop.Scallop.footer", "link" : "org\/rogach\/scallop\/Scallop.html#footer(f:String):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "banner", "tail" : "(b: String): Scallop", "member" : "org.rogach.scallop.Scallop.banner", "link" : "org\/rogach\/scallop\/Scallop.html#banner(b:String):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "version", "tail" : "(v: String): Scallop", "member" : "org.rogach.scallop.Scallop.version", "link" : "org\/rogach\/scallop\/Scallop.html#version(v:String):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "getAllSuppliedOptionNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.Scallop.getAllSuppliedOptionNames", "link" : "org\/rogach\/scallop\/Scallop.html#getAllSuppliedOptionNames:List[String]", "kind" : "def"}, {"label" : "getSubcommandNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.Scallop.getSubcommandNames", "link" : "org\/rogach\/scallop\/Scallop.html#getSubcommandNames:List[String]", "kind" : "def"}, {"label" : "getSubcommandArgs", "tail" : "(): List[String]", "member" : "org.rogach.scallop.Scallop.getSubcommandArgs", "link" : "org\/rogach\/scallop\/Scallop.html#getSubcommandArgs:List[String]", "kind" : "def"}, {"label" : "getSubbuilder", "tail" : "(): Option[Scallop]", "member" : "org.rogach.scallop.Scallop.getSubbuilder", "link" : "org\/rogach\/scallop\/Scallop.html#getSubbuilder:Option[org.rogach.scallop.Scallop]", "kind" : "def"}, {"label" : "getSubcommandName", "tail" : "(): Option[String]", "member" : "org.rogach.scallop.Scallop.getSubcommandName", "link" : "org\/rogach\/scallop\/Scallop.html#getSubcommandName:Option[String]", "kind" : "def"}, {"label" : "findSubbuilder", "tail" : "(name: String): Option[Scallop]", "member" : "org.rogach.scallop.Scallop.findSubbuilder", "link" : "org\/rogach\/scallop\/Scallop.html#findSubbuilder(name:String):Option[org.rogach.scallop.Scallop]", "kind" : "def"}, {"label" : "addSubBuilder", "tail" : "(nameAndAliases: Seq[String], builder: Scallop): Scallop", "member" : "org.rogach.scallop.Scallop.addSubBuilder", "link" : "org\/rogach\/scallop\/Scallop.html#addSubBuilder(nameAndAliases:Seq[String],builder:org.rogach.scallop.Scallop):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "toggle", "tail" : "(name: String, default: () => Option[Boolean], short: Char, noshort: Boolean, prefix: String, descrYes: String, descrNo: String, hidden: Boolean): Scallop", "member" : "org.rogach.scallop.Scallop.toggle", "link" : "org\/rogach\/scallop\/Scallop.html#toggle(name:String,default:()=>Option[Boolean],short:Char,noshort:Boolean,prefix:String,descrYes:String,descrNo:String,hidden:Boolean):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "number", "tail" : "(name: String, required: Boolean, descr: String, default: () => Option[Long], validate: (Long) => Boolean, hidden: Boolean)(conv: ValueConverter[Long]): Scallop", "member" : "org.rogach.scallop.Scallop.number", "link" : "org\/rogach\/scallop\/Scallop.html#number(name:String,required:Boolean,descr:String,default:()=>Option[Long],validate:Long=>Boolean,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Long]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "trailArg", "tail" : "(name: String, required: Boolean, descr: String, default: () => Option[A], validate: (A) => Boolean, hidden: Boolean)(conv: ValueConverter[A]): Scallop", "member" : "org.rogach.scallop.Scallop.trailArg", "link" : "org\/rogach\/scallop\/Scallop.html#trailArg[A](name:String,required:Boolean,descr:String,default:()=>Option[A],validate:A=>Boolean,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "propsLong", "tail" : "(name: String, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Scallop", "member" : "org.rogach.scallop.Scallop.propsLong", "link" : "org\/rogach\/scallop\/Scallop.html#propsLong[A](name:String,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "props", "tail" : "(name: Char, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Scallop", "member" : "org.rogach.scallop.Scallop.props", "link" : "org\/rogach\/scallop\/Scallop.html#props[A](name:Char,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "opt", "tail" : "(name: String, short: Char, descr: String, default: () => Option[A], validate: (A) => Boolean, required: Boolean, argName: String, hidden: Boolean, noshort: Boolean)(conv: ValueConverter[A]): Scallop", "member" : "org.rogach.scallop.Scallop.opt", "link" : "org\/rogach\/scallop\/Scallop.html#opt[A](name:String,short:Char,descr:String,default:()=>Option[A],validate:A=>Boolean,required:Boolean,argName:String,hidden:Boolean,noshort:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.Scallop", "kind" : "def"}, {"label" : "getOptionShortNames", "tail" : "(opt: CliOption): List[Char]", "member" : "org.rogach.scallop.Scallop.getOptionShortNames", "link" : "org\/rogach\/scallop\/Scallop.html#getOptionShortNames(opt:org.rogach.scallop.CliOption):List[Char]", "kind" : "def"}, {"label" : "getOptionWithShortName", "tail" : "(c: Char): Option[CliOption]", "member" : "org.rogach.scallop.Scallop.getOptionWithShortName", "link" : "org\/rogach\/scallop\/Scallop.html#getOptionWithShortName(c:Char):Option[org.rogach.scallop.CliOption]", "kind" : "def"}, {"label" : "ParseResult", "tail" : "", "member" : "org.rogach.scallop.Scallop.ParseResult", "link" : "org\/rogach\/scallop\/Scallop.html#ParseResultextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parsed", "tail" : "", "member" : "org.rogach.scallop.Scallop.Parsed", "link" : "org\/rogach\/scallop\/Scallop.html#Parsed=List[(org.rogach.scallop.CliOption,(String,List[String]))]", "kind" : "type"}, {"label" : "parent", "tail" : ": Option[Scallop]", "member" : "org.rogach.scallop.Scallop.parent", "link" : "org\/rogach\/scallop\/Scallop.html#parent:Option[org.rogach.scallop.Scallop]", "kind" : "var"}, {"member" : "org.rogach.scallop.Scallop#<init>", "error" : "unsupported entity"}, {"label" : "subbuilders", "tail" : ": List[(String, Scallop)]", "member" : "org.rogach.scallop.Scallop.subbuilders", "link" : "org\/rogach\/scallop\/Scallop.html#subbuilders:List[(String,org.rogach.scallop.Scallop)]", "kind" : "val"}, {"label" : "helpFormatter", "tail" : ": ScallopHelpFormatter", "member" : "org.rogach.scallop.Scallop.helpFormatter", "link" : "org\/rogach\/scallop\/Scallop.html#helpFormatter:org.rogach.scallop.ScallopHelpFormatter", "kind" : "val"}, {"label" : "noshort", "tail" : ": Boolean", "member" : "org.rogach.scallop.Scallop.noshort", "link" : "org\/rogach\/scallop\/Scallop.html#noshort:Boolean", "kind" : "val"}, {"label" : "appendDefaultToDescription", "tail" : ": Boolean", "member" : "org.rogach.scallop.Scallop.appendDefaultToDescription", "link" : "org\/rogach\/scallop\/Scallop.html#appendDefaultToDescription:Boolean", "kind" : "val"}, {"label" : "shortSubcommandsHelp", "tail" : ": Boolean", "member" : "org.rogach.scallop.Scallop.shortSubcommandsHelp", "link" : "org\/rogach\/scallop\/Scallop.html#shortSubcommandsHelp:Boolean", "kind" : "val"}, {"label" : "helpWidth", "tail" : ": Option[Int]", "member" : "org.rogach.scallop.Scallop.helpWidth", "link" : "org\/rogach\/scallop\/Scallop.html#helpWidth:Option[Int]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.Scallop.descr", "link" : "org\/rogach\/scallop\/Scallop.html#descr:String", "kind" : "val"}, {"label" : "foot", "tail" : ": Option[String]", "member" : "org.rogach.scallop.Scallop.foot", "link" : "org\/rogach\/scallop\/Scallop.html#foot:Option[String]", "kind" : "val"}, {"label" : "bann", "tail" : ": Option[String]", "member" : "org.rogach.scallop.Scallop.bann", "link" : "org\/rogach\/scallop\/Scallop.html#bann:Option[String]", "kind" : "val"}, {"label" : "vers", "tail" : ": Option[String]", "member" : "org.rogach.scallop.Scallop.vers", "link" : "org\/rogach\/scallop\/Scallop.html#vers:Option[String]", "kind" : "val"}, {"label" : "mainOpts", "tail" : ": List[String]", "member" : "org.rogach.scallop.Scallop.mainOpts", "link" : "org\/rogach\/scallop\/Scallop.html#mainOpts:List[String]", "kind" : "val"}, {"label" : "opts", "tail" : ": List[CliOption]", "member" : "org.rogach.scallop.Scallop.opts", "link" : "org\/rogach\/scallop\/Scallop.html#opts:List[org.rogach.scallop.CliOption]", "kind" : "val"}, {"label" : "args", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.Scallop.args", "link" : "org\/rogach\/scallop\/Scallop.html#args:scala.collection.Seq[String]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/Scallop.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "loadArgList", "tail" : "(args: Seq[String]): Seq[String]", "member" : "org.rogach.scallop.ScallopArgListLoader.loadArgList", "link" : "org\/rogach\/scallop\/Scallop.html#loadArgList(args:scala.collection.Seq[String]):scala.collection.Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Scallop.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Scallop.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Scallop.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Scallop.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Scallop.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Scallop.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Scallop.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Scallop.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Scallop.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Scallop.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Scallop.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Scallop.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Scallop.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Scallop.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Scallop.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Scallop.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/Scallop.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.ScallopArgListLoader", "trait" : "org\/rogach\/scallop\/ScallopArgListLoader.html", "kind" : "trait", "members_trait" : [{"label" : "loadArgList", "tail" : "(args: Seq[String]): Seq[String]", "member" : "org.rogach.scallop.ScallopArgListLoader.loadArgList", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#loadArgList(args:scala.collection.Seq[String]):scala.collection.Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ScallopArgListLoader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.rogach.scallop.ScallopConf", "shortDescription" : "", "members_class" : [{"label" : "performOptionNameGuessing", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.performOptionNameGuessing", "link" : "org\/rogach\/scallop\/ScallopConf.html#performOptionNameGuessing():Unit", "kind" : "def"}, {"label" : "guessOptionName_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConf.guessOptionName_=", "link" : "org\/rogach\/scallop\/ScallopConf.html#guessOptionName_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "guessOptionName", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConf.guessOptionName", "link" : "org\/rogach\/scallop\/ScallopConf.html#guessOptionName:Boolean", "kind" : "def"}, {"label" : "optionNameGuessingSupported", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConf.optionNameGuessingSupported", "link" : "org\/rogach\/scallop\/ScallopConf.html#optionNameGuessingSupported:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.ScallopConf#<init>", "error" : "unsupported entity"}, {"label" : "verify", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.verify", "link" : "org\/rogach\/scallop\/ScallopConf.html#verify():Unit", "kind" : "def"}, {"label" : "verifyConf", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.verifyConf", "link" : "org\/rogach\/scallop\/ScallopConf.html#verifyConf():Unit", "kind" : "def"}, {"label" : "shortSubcommandsHelp", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConfBase.shortSubcommandsHelp", "link" : "org\/rogach\/scallop\/ScallopConf.html#shortSubcommandsHelp(v:Boolean):Unit", "kind" : "def"}, {"label" : "helpWidth", "tail" : "(w: Int): Unit", "member" : "org.rogach.scallop.ScallopConfBase.helpWidth", "link" : "org\/rogach\/scallop\/ScallopConf.html#helpWidth(w:Int):Unit", "kind" : "def"}, {"label" : "footer", "tail" : "(f: String): Unit", "member" : "org.rogach.scallop.ScallopConfBase.footer", "link" : "org\/rogach\/scallop\/ScallopConf.html#footer(f:String):Unit", "kind" : "def"}, {"label" : "banner", "tail" : "(b: String): Unit", "member" : "org.rogach.scallop.ScallopConfBase.banner", "link" : "org\/rogach\/scallop\/ScallopConf.html#banner(b:String):Unit", "kind" : "def"}, {"label" : "version", "tail" : "(v: String): Unit", "member" : "org.rogach.scallop.ScallopConfBase.version", "link" : "org\/rogach\/scallop\/ScallopConf.html#version(v:String):Unit", "kind" : "def"}, {"label" : "printHelp", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.printHelp", "link" : "org\/rogach\/scallop\/ScallopConf.html#printHelp():Unit", "kind" : "def"}, {"label" : "filteredSummary", "tail" : "(blurred: Set[String]): String", "member" : "org.rogach.scallop.ScallopConfBase.filteredSummary", "link" : "org\/rogach\/scallop\/ScallopConf.html#filteredSummary(blurred:Set[String]):String", "kind" : "def"}, {"label" : "summary", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopConfBase.summary", "link" : "org\/rogach\/scallop\/ScallopConf.html#summary:String", "kind" : "def"}, {"label" : "requireSubcommand", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.requireSubcommand", "link" : "org\/rogach\/scallop\/ScallopConf.html#requireSubcommand():Unit", "kind" : "def"}, {"label" : "validatePathsIsFile", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsIsFile", "link" : "org\/rogach\/scallop\/ScallopConf.html#validatePathsIsFile(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathsIsDirectory", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsIsDirectory", "link" : "org\/rogach\/scallop\/ScallopConf.html#validatePathsIsDirectory(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathsDoesNotExist", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsDoesNotExist", "link" : "org\/rogach\/scallop\/ScallopConf.html#validatePathsDoesNotExist(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathsExists", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsExists", "link" : "org\/rogach\/scallop\/ScallopConf.html#validatePathsExists(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathIsFile", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathIsFile", "link" : "org\/rogach\/scallop\/ScallopConf.html#validatePathIsFile(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validatePathIsDirectory", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathIsDirectory", "link" : "org\/rogach\/scallop\/ScallopConf.html#validatePathIsDirectory(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validatePathDoesNotExist", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathDoesNotExist", "link" : "org\/rogach\/scallop\/ScallopConf.html#validatePathDoesNotExist(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validatePathExists", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathExists", "link" : "org\/rogach\/scallop\/ScallopConf.html#validatePathExists(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validateFilesIsFile", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesIsFile", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFilesIsFile(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFilesIsDirectory", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesIsDirectory", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFilesIsDirectory(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFilesDoNotExist", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesDoNotExist", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFilesDoNotExist(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFilesExist", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesExist", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFilesExist(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFileIsFile", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileIsFile", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFileIsFile(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileIsDirectory", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileIsDirectory", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFileIsDirectory(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileDoesNotExist", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileDoesNotExist", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFileDoesNotExist(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileExists", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileExists", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateFileExists(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "allDefinedOrUndefined", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.allDefinedOrUndefined", "link" : "org\/rogach\/scallop\/ScallopConf.html#allDefinedOrUndefined(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "codependent", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.codependent", "link" : "org\/rogach\/scallop\/ScallopConf.html#codependent(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "mutuallyExclusive", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.mutuallyExclusive", "link" : "org\/rogach\/scallop\/ScallopConf.html#mutuallyExclusive(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.requireOne", "link" : "org\/rogach\/scallop\/ScallopConf.html#requireOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireAtLeastOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.requireAtLeastOne", "link" : "org\/rogach\/scallop\/ScallopConf.html#requireAtLeastOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "conflicts", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.conflicts", "link" : "org\/rogach\/scallop\/ScallopConf.html#conflicts(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAll", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.dependsOnAll", "link" : "org\/rogach\/scallop\/ScallopConf.html#dependsOnAll(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAny", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.dependsOnAny", "link" : "org\/rogach\/scallop\/ScallopConf.html#dependsOnAny(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "addValidation", "tail" : "(fn: => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.addValidation", "link" : "org\/rogach\/scallop\/ScallopConf.html#addValidation(fn:=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "assertVerified", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.assertVerified", "link" : "org\/rogach\/scallop\/ScallopConf.html#assertVerified():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(e: Throwable): Unit", "member" : "org.rogach.scallop.ScallopConfBase.onError", "link" : "org\/rogach\/scallop\/ScallopConf.html#onError(e:Throwable):Unit", "kind" : "def"}, {"label" : "errorMessageHandler", "tail" : ": (String) => Unit", "member" : "org.rogach.scallop.ScallopConfBase.errorMessageHandler", "link" : "org\/rogach\/scallop\/ScallopConf.html#errorMessageHandler:String=>Unit", "kind" : "var"}, {"label" : "printedName", "tail" : ": String", "member" : "org.rogach.scallop.ScallopConfBase.printedName", "link" : "org\/rogach\/scallop\/ScallopConf.html#printedName:String", "kind" : "var"}, {"label" : "toggle", "tail" : "(name: String, default: => Option[Boolean], short: Char, noshort: Boolean, prefix: String, descrYes: String, descrNo: String, hidden: Boolean): ScallopOption[Boolean]", "member" : "org.rogach.scallop.ScallopConfBase.toggle", "link" : "org\/rogach\/scallop\/ScallopConf.html#toggle(name:String,default:=>Option[Boolean],short:Char,noshort:Boolean,prefix:String,descrYes:String,descrNo:String,hidden:Boolean):org.rogach.scallop.ScallopOption[Boolean]", "kind" : "def"}, {"label" : "number", "tail" : "(name: String, descr: String, validate: (Long) => Boolean, required: Boolean, default: => Option[Long], hidden: Boolean)(conv: ValueConverter[Long]): ScallopOption[Long]", "member" : "org.rogach.scallop.ScallopConfBase.number", "link" : "org\/rogach\/scallop\/ScallopConf.html#number(name:String,descr:String,validate:Long=>Boolean,required:Boolean,default:=>Option[Long],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Long]):org.rogach.scallop.ScallopOption[Long]", "kind" : "def"}, {"label" : "trailArg", "tail" : "(name: String, descr: String, validate: (A) => Boolean, required: Boolean, default: => Option[A], hidden: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConfBase.trailArg", "link" : "org\/rogach\/scallop\/ScallopConf.html#trailArg[A](name:String,descr:String,validate:A=>Boolean,required:Boolean,default:=>Option[A],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "propsLong", "tail" : "(name: String, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConfBase.propsLong", "link" : "org\/rogach\/scallop\/ScallopConf.html#propsLong[A](name:String,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "props", "tail" : "(name: Char, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConfBase.props", "link" : "org\/rogach\/scallop\/ScallopConf.html#props[A](name:Char,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "tally", "tail" : "(name: String, short: Char, descr: String, hidden: Boolean, noshort: Boolean): ScallopOption[Int]", "member" : "org.rogach.scallop.ScallopConfBase.tally", "link" : "org\/rogach\/scallop\/ScallopConf.html#tally(name:String,short:Char,descr:String,hidden:Boolean,noshort:Boolean):org.rogach.scallop.ScallopOption[Int]", "kind" : "def"}, {"label" : "mainOptions_=", "tail" : "(newMainOptions: => Seq[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.mainOptions_=", "link" : "org\/rogach\/scallop\/ScallopConf.html#mainOptions_=(newMainOptions:=>Seq[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "mainOptions", "tail" : "(): Seq[String]", "member" : "org.rogach.scallop.ScallopConfBase.mainOptions", "link" : "org\/rogach\/scallop\/ScallopConf.html#mainOptions:Seq[String]", "kind" : "def"}, {"label" : "choice", "tail" : "(choices: Seq[String], name: String, short: Char, descr: String, default: => Option[String], required: Boolean, argName: String, hidden: Boolean, noshort: Boolean): ScallopOption[String]", "member" : "org.rogach.scallop.ScallopConfBase.choice", "link" : "org\/rogach\/scallop\/ScallopConf.html#choice(choices:Seq[String],name:String,short:Char,descr:String,default:=>Option[String],required:Boolean,argName:String,hidden:Boolean,noshort:Boolean):org.rogach.scallop.ScallopOption[String]", "kind" : "def"}, {"label" : "opt", "tail" : "(name: String, short: Char, descr: String, default: => Option[A], validate: (A) => Boolean, required: Boolean, argName: String, hidden: Boolean, noshort: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConfBase.opt", "link" : "org\/rogach\/scallop\/ScallopConf.html#opt[A](name:String,short:Char,descr:String,default:=>Option[A],validate:A=>Boolean,required:Boolean,argName:String,hidden:Boolean,noshort:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "verified", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConfBase.verified", "link" : "org\/rogach\/scallop\/ScallopConf.html#verified:Boolean", "kind" : "var"}, {"label" : "subcommands", "tail" : "(): List[ScallopConfBase]", "member" : "org.rogach.scallop.ScallopConfBase.subcommands", "link" : "org\/rogach\/scallop\/ScallopConf.html#subcommands:List[org.rogach.scallop.ScallopConfBase]", "kind" : "def"}, {"label" : "subcommand", "tail" : "(): Option[ScallopConfBase]", "member" : "org.rogach.scallop.ScallopConfBase.subcommand", "link" : "org\/rogach\/scallop\/ScallopConf.html#subcommand:Option[org.rogach.scallop.ScallopConfBase]", "kind" : "def"}, {"label" : "noshort_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConfBase.noshort_=", "link" : "org\/rogach\/scallop\/ScallopConf.html#noshort_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "noshort", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConfBase.noshort", "link" : "org\/rogach\/scallop\/ScallopConf.html#noshort:Boolean", "kind" : "def"}, {"label" : "helpFormatter_=", "tail" : "(formatter: ScallopHelpFormatter): Unit", "member" : "org.rogach.scallop.ScallopConfBase.helpFormatter_=", "link" : "org\/rogach\/scallop\/ScallopConf.html#helpFormatter_=(formatter:org.rogach.scallop.ScallopHelpFormatter):Unit", "kind" : "def"}, {"label" : "helpFormatter", "tail" : "(): ScallopHelpFormatter", "member" : "org.rogach.scallop.ScallopConfBase.helpFormatter", "link" : "org\/rogach\/scallop\/ScallopConf.html#helpFormatter:org.rogach.scallop.ScallopHelpFormatter", "kind" : "def"}, {"label" : "appendDefaultToDescription_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConfBase.appendDefaultToDescription_=", "link" : "org\/rogach\/scallop\/ScallopConf.html#appendDefaultToDescription_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "appendDefaultToDescription", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConfBase.appendDefaultToDescription", "link" : "org\/rogach\/scallop\/ScallopConf.html#appendDefaultToDescription:Boolean", "kind" : "def"}, {"label" : "_guessOptionName", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConfBase._guessOptionName", "link" : "org\/rogach\/scallop\/ScallopConf.html#_guessOptionName:Boolean", "kind" : "var"}, {"label" : "editBuilder", "tail" : "(fn: (Scallop) => Scallop): Unit", "member" : "org.rogach.scallop.ScallopConfBase.editBuilder", "link" : "org\/rogach\/scallop\/ScallopConf.html#editBuilder(fn:org.rogach.scallop.Scallop=>org.rogach.scallop.Scallop):Unit", "kind" : "def"}, {"label" : "builder", "tail" : ": Scallop", "member" : "org.rogach.scallop.ScallopConfBase.builder", "link" : "org\/rogach\/scallop\/ScallopConf.html#builder:org.rogach.scallop.Scallop", "kind" : "var"}, {"label" : "addSubcommand", "tail" : "(conf: Subcommand): Unit", "member" : "org.rogach.scallop.ScallopConfBase.addSubcommand", "link" : "org\/rogach\/scallop\/ScallopConf.html#addSubcommand(conf:org.rogach.scallop.Subcommand):Unit", "kind" : "def"}, {"label" : "subconfigs", "tail" : ": Seq[ScallopConfBase]", "member" : "org.rogach.scallop.ScallopConfBase.subconfigs", "link" : "org\/rogach\/scallop\/ScallopConf.html#subconfigs:Seq[org.rogach.scallop.ScallopConfBase]", "kind" : "var"}, {"label" : "isRootConfig", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConfBase.isRootConfig", "link" : "org\/rogach\/scallop\/ScallopConf.html#isRootConfig:Boolean", "kind" : "var"}, {"label" : "parentConfig", "tail" : ": ScallopConfBase", "member" : "org.rogach.scallop.ScallopConfBase.parentConfig", "link" : "org\/rogach\/scallop\/ScallopConf.html#parentConfig:org.rogach.scallop.ScallopConfBase", "kind" : "var"}, {"label" : "commandNameAndAliases", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConfBase.commandNameAndAliases", "link" : "org\/rogach\/scallop\/ScallopConf.html#commandNameAndAliases:Seq[String]", "kind" : "val"}, {"label" : "args", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConfBase.args", "link" : "org\/rogach\/scallop\/ScallopConf.html#args:scala.collection.Seq[String]", "kind" : "val"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21], Option[A22]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21],Option[A22])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (Option[A1], Option[A2], Option[A3], Option[A4]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(Option[A1],Option[A2],Option[A3],Option[A4])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (Option[A1], Option[A2], Option[A3]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(Option[A1],Option[A2],Option[A3])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (Option[A1], Option[A2]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(Option[A1],Option[A2])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1])(fn: (Option[A1]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConf.html#validateOpt[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:Option[A1]=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (A1, A2, A3, A4, A5, A6, A7, A8) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(A1,A2,A3,A4,A5,A6,A7,A8)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (A1, A2, A3, A4, A5, A6, A7) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(A1,A2,A3,A4,A5,A6,A7)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (A1, A2, A3, A4, A5, A6) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(A1,A2,A3,A4,A5,A6)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (A1, A2, A3, A4, A5) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(A1,A2,A3,A4,A5)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (A1, A2, A3, A4) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(A1,A2,A3,A4)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (A1, A2, A3) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(A1,A2,A3)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (A1, A2) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(A1,A2)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1])(fn: (A1) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConf.html#validate[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:A1=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validations", "tail" : ": List[() => Either[String, Unit]]", "member" : "org.rogach.scallop.ScallopConfValidations.validations", "link" : "org\/rogach\/scallop\/ScallopConf.html#validations:List[()=>Either[String,Unit]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ScallopConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ScallopConf.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ScallopConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ScallopConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ScallopConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ScallopConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ScallopConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConf.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ScallopConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ScallopConf.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ScallopConf.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ScallopConf.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ScallopConf.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ScallopConf.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ScallopConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/ScallopConf.html", "kind" : "class"}, {"name" : "org.rogach.scallop.ScallopConfBase", "shortDescription" : "", "members_class" : [{"label" : "verify", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.verify", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#verify():Unit", "kind" : "def"}, {"label" : "verifyConf", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.verifyConf", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#verifyConf():Unit", "kind" : "def"}, {"label" : "shortSubcommandsHelp", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConfBase.shortSubcommandsHelp", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#shortSubcommandsHelp(v:Boolean):Unit", "kind" : "def"}, {"label" : "helpWidth", "tail" : "(w: Int): Unit", "member" : "org.rogach.scallop.ScallopConfBase.helpWidth", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#helpWidth(w:Int):Unit", "kind" : "def"}, {"label" : "footer", "tail" : "(f: String): Unit", "member" : "org.rogach.scallop.ScallopConfBase.footer", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#footer(f:String):Unit", "kind" : "def"}, {"label" : "banner", "tail" : "(b: String): Unit", "member" : "org.rogach.scallop.ScallopConfBase.banner", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#banner(b:String):Unit", "kind" : "def"}, {"label" : "version", "tail" : "(v: String): Unit", "member" : "org.rogach.scallop.ScallopConfBase.version", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#version(v:String):Unit", "kind" : "def"}, {"label" : "printHelp", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.printHelp", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#printHelp():Unit", "kind" : "def"}, {"label" : "filteredSummary", "tail" : "(blurred: Set[String]): String", "member" : "org.rogach.scallop.ScallopConfBase.filteredSummary", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#filteredSummary(blurred:Set[String]):String", "kind" : "def"}, {"label" : "summary", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopConfBase.summary", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#summary:String", "kind" : "def"}, {"label" : "requireSubcommand", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.requireSubcommand", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#requireSubcommand():Unit", "kind" : "def"}, {"label" : "validatePathsIsFile", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsIsFile", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validatePathsIsFile(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathsIsDirectory", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsIsDirectory", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validatePathsIsDirectory(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathsDoesNotExist", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsDoesNotExist", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validatePathsDoesNotExist(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathsExists", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsExists", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validatePathsExists(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathIsFile", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathIsFile", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validatePathIsFile(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validatePathIsDirectory", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathIsDirectory", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validatePathIsDirectory(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validatePathDoesNotExist", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathDoesNotExist", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validatePathDoesNotExist(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validatePathExists", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathExists", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validatePathExists(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validateFilesIsFile", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesIsFile", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateFilesIsFile(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFilesIsDirectory", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesIsDirectory", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateFilesIsDirectory(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFilesDoNotExist", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesDoNotExist", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateFilesDoNotExist(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFilesExist", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesExist", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateFilesExist(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFileIsFile", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileIsFile", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateFileIsFile(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileIsDirectory", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileIsDirectory", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateFileIsDirectory(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileDoesNotExist", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileDoesNotExist", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateFileDoesNotExist(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileExists", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileExists", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateFileExists(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "allDefinedOrUndefined", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.allDefinedOrUndefined", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#allDefinedOrUndefined(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "codependent", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.codependent", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#codependent(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "mutuallyExclusive", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.mutuallyExclusive", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#mutuallyExclusive(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.requireOne", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#requireOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireAtLeastOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.requireAtLeastOne", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#requireAtLeastOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "conflicts", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.conflicts", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#conflicts(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAll", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.dependsOnAll", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#dependsOnAll(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAny", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.dependsOnAny", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#dependsOnAny(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "addValidation", "tail" : "(fn: => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.addValidation", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#addValidation(fn:=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "assertVerified", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.assertVerified", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#assertVerified():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(e: Throwable): Unit", "member" : "org.rogach.scallop.ScallopConfBase.onError", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#onError(e:Throwable):Unit", "kind" : "def"}, {"label" : "errorMessageHandler", "tail" : ": (String) => Unit", "member" : "org.rogach.scallop.ScallopConfBase.errorMessageHandler", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#errorMessageHandler:String=>Unit", "kind" : "var"}, {"label" : "printedName", "tail" : ": String", "member" : "org.rogach.scallop.ScallopConfBase.printedName", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#printedName:String", "kind" : "var"}, {"label" : "toggle", "tail" : "(name: String, default: => Option[Boolean], short: Char, noshort: Boolean, prefix: String, descrYes: String, descrNo: String, hidden: Boolean): ScallopOption[Boolean]", "member" : "org.rogach.scallop.ScallopConfBase.toggle", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#toggle(name:String,default:=>Option[Boolean],short:Char,noshort:Boolean,prefix:String,descrYes:String,descrNo:String,hidden:Boolean):org.rogach.scallop.ScallopOption[Boolean]", "kind" : "def"}, {"label" : "number", "tail" : "(name: String, descr: String, validate: (Long) => Boolean, required: Boolean, default: => Option[Long], hidden: Boolean)(conv: ValueConverter[Long]): ScallopOption[Long]", "member" : "org.rogach.scallop.ScallopConfBase.number", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#number(name:String,descr:String,validate:Long=>Boolean,required:Boolean,default:=>Option[Long],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Long]):org.rogach.scallop.ScallopOption[Long]", "kind" : "def"}, {"label" : "trailArg", "tail" : "(name: String, descr: String, validate: (A) => Boolean, required: Boolean, default: => Option[A], hidden: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConfBase.trailArg", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#trailArg[A](name:String,descr:String,validate:A=>Boolean,required:Boolean,default:=>Option[A],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "propsLong", "tail" : "(name: String, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConfBase.propsLong", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#propsLong[A](name:String,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "props", "tail" : "(name: Char, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConfBase.props", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#props[A](name:Char,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "tally", "tail" : "(name: String, short: Char, descr: String, hidden: Boolean, noshort: Boolean): ScallopOption[Int]", "member" : "org.rogach.scallop.ScallopConfBase.tally", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#tally(name:String,short:Char,descr:String,hidden:Boolean,noshort:Boolean):org.rogach.scallop.ScallopOption[Int]", "kind" : "def"}, {"label" : "mainOptions_=", "tail" : "(newMainOptions: => Seq[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.mainOptions_=", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#mainOptions_=(newMainOptions:=>Seq[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "mainOptions", "tail" : "(): Seq[String]", "member" : "org.rogach.scallop.ScallopConfBase.mainOptions", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#mainOptions:Seq[String]", "kind" : "def"}, {"label" : "choice", "tail" : "(choices: Seq[String], name: String, short: Char, descr: String, default: => Option[String], required: Boolean, argName: String, hidden: Boolean, noshort: Boolean): ScallopOption[String]", "member" : "org.rogach.scallop.ScallopConfBase.choice", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#choice(choices:Seq[String],name:String,short:Char,descr:String,default:=>Option[String],required:Boolean,argName:String,hidden:Boolean,noshort:Boolean):org.rogach.scallop.ScallopOption[String]", "kind" : "def"}, {"label" : "opt", "tail" : "(name: String, short: Char, descr: String, default: => Option[A], validate: (A) => Boolean, required: Boolean, argName: String, hidden: Boolean, noshort: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConfBase.opt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#opt[A](name:String,short:Char,descr:String,default:=>Option[A],validate:A=>Boolean,required:Boolean,argName:String,hidden:Boolean,noshort:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "verified", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConfBase.verified", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#verified:Boolean", "kind" : "var"}, {"label" : "subcommands", "tail" : "(): List[ScallopConfBase]", "member" : "org.rogach.scallop.ScallopConfBase.subcommands", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#subcommands:List[org.rogach.scallop.ScallopConfBase]", "kind" : "def"}, {"label" : "subcommand", "tail" : "(): Option[ScallopConfBase]", "member" : "org.rogach.scallop.ScallopConfBase.subcommand", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#subcommand:Option[org.rogach.scallop.ScallopConfBase]", "kind" : "def"}, {"label" : "noshort_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConfBase.noshort_=", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#noshort_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "noshort", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConfBase.noshort", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#noshort:Boolean", "kind" : "def"}, {"label" : "helpFormatter_=", "tail" : "(formatter: ScallopHelpFormatter): Unit", "member" : "org.rogach.scallop.ScallopConfBase.helpFormatter_=", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#helpFormatter_=(formatter:org.rogach.scallop.ScallopHelpFormatter):Unit", "kind" : "def"}, {"label" : "helpFormatter", "tail" : "(): ScallopHelpFormatter", "member" : "org.rogach.scallop.ScallopConfBase.helpFormatter", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#helpFormatter:org.rogach.scallop.ScallopHelpFormatter", "kind" : "def"}, {"label" : "appendDefaultToDescription_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConfBase.appendDefaultToDescription_=", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#appendDefaultToDescription_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "appendDefaultToDescription", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConfBase.appendDefaultToDescription", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#appendDefaultToDescription:Boolean", "kind" : "def"}, {"label" : "_guessOptionName", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConfBase._guessOptionName", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#_guessOptionName:Boolean", "kind" : "var"}, {"label" : "editBuilder", "tail" : "(fn: (Scallop) => Scallop): Unit", "member" : "org.rogach.scallop.ScallopConfBase.editBuilder", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#editBuilder(fn:org.rogach.scallop.Scallop=>org.rogach.scallop.Scallop):Unit", "kind" : "def"}, {"label" : "builder", "tail" : ": Scallop", "member" : "org.rogach.scallop.ScallopConfBase.builder", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#builder:org.rogach.scallop.Scallop", "kind" : "var"}, {"label" : "addSubcommand", "tail" : "(conf: Subcommand): Unit", "member" : "org.rogach.scallop.ScallopConfBase.addSubcommand", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#addSubcommand(conf:org.rogach.scallop.Subcommand):Unit", "kind" : "def"}, {"label" : "subconfigs", "tail" : ": Seq[ScallopConfBase]", "member" : "org.rogach.scallop.ScallopConfBase.subconfigs", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#subconfigs:Seq[org.rogach.scallop.ScallopConfBase]", "kind" : "var"}, {"label" : "isRootConfig", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConfBase.isRootConfig", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#isRootConfig:Boolean", "kind" : "var"}, {"label" : "parentConfig", "tail" : ": ScallopConfBase", "member" : "org.rogach.scallop.ScallopConfBase.parentConfig", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#parentConfig:org.rogach.scallop.ScallopConfBase", "kind" : "var"}, {"member" : "org.rogach.scallop.ScallopConfBase#<init>", "error" : "unsupported entity"}, {"label" : "commandNameAndAliases", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConfBase.commandNameAndAliases", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#commandNameAndAliases:Seq[String]", "kind" : "val"}, {"label" : "args", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConfBase.args", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#args:scala.collection.Seq[String]", "kind" : "val"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21], Option[A22]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21],Option[A22])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (Option[A1], Option[A2], Option[A3], Option[A4]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(Option[A1],Option[A2],Option[A3],Option[A4])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (Option[A1], Option[A2], Option[A3]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(Option[A1],Option[A2],Option[A3])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (Option[A1], Option[A2]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(Option[A1],Option[A2])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1])(fn: (Option[A1]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validateOpt[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:Option[A1]=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (A1, A2, A3, A4, A5, A6, A7, A8) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(A1,A2,A3,A4,A5,A6,A7,A8)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (A1, A2, A3, A4, A5, A6, A7) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(A1,A2,A3,A4,A5,A6,A7)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (A1, A2, A3, A4, A5, A6) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(A1,A2,A3,A4,A5,A6)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (A1, A2, A3, A4, A5) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(A1,A2,A3,A4,A5)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (A1, A2, A3, A4) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(A1,A2,A3,A4)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (A1, A2, A3) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(A1,A2,A3)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (A1, A2) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(A1,A2)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1])(fn: (A1) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validate[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:A1=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validations", "tail" : ": List[() => Either[String, Unit]]", "member" : "org.rogach.scallop.ScallopConfValidations.validations", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#validations:List[()=>Either[String,Unit]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ScallopConfBase.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "performOptionNameGuessing", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.performOptionNameGuessing", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#performOptionNameGuessing():Unit", "kind" : "abstract def"}, {"label" : "optionNameGuessingSupported", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConfBase.optionNameGuessingSupported", "link" : "org\/rogach\/scallop\/ScallopConfBase.html#optionNameGuessingSupported:Boolean", "kind" : "abstract def"}], "class" : "org\/rogach\/scallop\/ScallopConfBase.html", "kind" : "class"}, {"name" : "org.rogach.scallop.ScallopConfValidations", "trait" : "org\/rogach\/scallop\/ScallopConfValidations.html", "kind" : "trait", "members_trait" : [{"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21], Option[A22]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21],Option[A22])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (Option[A1], Option[A2], Option[A3], Option[A4]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(Option[A1],Option[A2],Option[A3],Option[A4])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (Option[A1], Option[A2], Option[A3]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(Option[A1],Option[A2],Option[A3])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (Option[A1], Option[A2]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(Option[A1],Option[A2])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1])(fn: (Option[A1]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validateOpt[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:Option[A1]=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (A1, A2, A3, A4, A5, A6, A7, A8) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(A1,A2,A3,A4,A5,A6,A7,A8)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (A1, A2, A3, A4, A5, A6, A7) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(A1,A2,A3,A4,A5,A6,A7)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (A1, A2, A3, A4, A5, A6) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(A1,A2,A3,A4,A5,A6)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (A1, A2, A3, A4, A5) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(A1,A2,A3,A4,A5)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (A1, A2, A3, A4) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(A1,A2,A3,A4)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (A1, A2, A3) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(A1,A2,A3)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (A1, A2) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(A1,A2)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1])(fn: (A1) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validate[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:A1=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validations", "tail" : ": List[() => Either[String, Unit]]", "member" : "org.rogach.scallop.ScallopConfValidations.validations", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#validations:List[()=>Either[String,Unit]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ScallopConfValidations.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Helper trait for generaton of validate methods on ScallopConf."}, {"name" : "org.rogach.scallop.ScallopHelpFormatter", "shortDescription" : "", "members_class" : [{"label" : "getChoiceHelpText", "tail" : "(description: String, choices: Seq[String]): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getChoiceHelpText", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getChoiceHelpText(description:String,choices:Seq[String]):String", "kind" : "def"}, {"label" : "needToAppendDefaultToDescription", "tail" : "(s: Scallop): Boolean", "member" : "org.rogach.scallop.ScallopHelpFormatter.needToAppendDefaultToDescription", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#needToAppendDefaultToDescription(s:org.rogach.scallop.Scallop):Boolean", "kind" : "def"}, {"label" : "getSubcommandOptionsHelp", "tail" : "(sub: Scallop, namePrefix: String): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getSubcommandOptionsHelp", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getSubcommandOptionsHelp(sub:org.rogach.scallop.Scallop,namePrefix:String):String", "kind" : "def"}, {"label" : "getSubcommandHeaderPrefix", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getSubcommandHeaderPrefix", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getSubcommandHeaderPrefix:String", "kind" : "def"}, {"label" : "getSubcommandHeader", "tail" : "(sub: Scallop, namePrefix: String, names: List[String]): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getSubcommandHeader", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getSubcommandHeader(sub:org.rogach.scallop.Scallop,namePrefix:String,names:List[String]):String", "kind" : "def"}, {"label" : "getSubcommandHelp", "tail" : "(sub: Scallop, namePrefix: String, names: List[String]): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getSubcommandHelp", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getSubcommandHelp(sub:org.rogach.scallop.Scallop,namePrefix:String,names:List[String]):String", "kind" : "def"}, {"label" : "getSubcommandsWithNames", "tail" : "(s: Scallop): List[(Scallop, List[String])]", "member" : "org.rogach.scallop.ScallopHelpFormatter.getSubcommandsWithNames", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getSubcommandsWithNames(s:org.rogach.scallop.Scallop):List[(org.rogach.scallop.Scallop,List[String])]", "kind" : "def"}, {"label" : "getLongSubcommandsHelp", "tail" : "(s: Scallop, subcommandPrefix: String): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getLongSubcommandsHelp", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getLongSubcommandsHelp(s:org.rogach.scallop.Scallop,subcommandPrefix:String):String", "kind" : "def"}, {"label" : "getSubcommandsSectionName", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getSubcommandsSectionName", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getSubcommandsSectionName:String", "kind" : "def"}, {"label" : "getShortSubcommandsHelp", "tail" : "(s: Scallop): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getShortSubcommandsHelp", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getShortSubcommandsHelp(s:org.rogach.scallop.Scallop):String", "kind" : "def"}, {"label" : "getSubcommandsHelp", "tail" : "(s: Scallop, subcommandPrefix: String): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getSubcommandsHelp", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getSubcommandsHelp(s:org.rogach.scallop.Scallop,subcommandPrefix:String):String", "kind" : "def"}, {"label" : "getTrailingArgsSectionName", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getTrailingArgsSectionName", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getTrailingArgsSectionName:String", "kind" : "def"}, {"label" : "getTrailingArgsHelp", "tail" : "(s: Scallop): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getTrailingArgsHelp", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getTrailingArgsHelp(s:org.rogach.scallop.Scallop):String", "kind" : "def"}, {"label" : "getVersionLine", "tail" : "(s: Scallop): List[Option[CliOption]]", "member" : "org.rogach.scallop.ScallopHelpFormatter.getVersionLine", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getVersionLine(s:org.rogach.scallop.Scallop):List[Option[org.rogach.scallop.CliOption]]", "kind" : "def"}, {"label" : "getHelpLine", "tail" : "(s: Scallop): List[Option[CliOption]]", "member" : "org.rogach.scallop.ScallopHelpFormatter.getHelpLine", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getHelpLine(s:org.rogach.scallop.Scallop):List[Option[org.rogach.scallop.CliOption]]", "kind" : "def"}, {"label" : "getNormalOptionLines", "tail" : "(s: Scallop): List[Option[CliOption]]", "member" : "org.rogach.scallop.ScallopHelpFormatter.getNormalOptionLines", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getNormalOptionLines(s:org.rogach.scallop.Scallop):List[Option[org.rogach.scallop.CliOption]]", "kind" : "def"}, {"label" : "getMainOptionLines", "tail" : "(s: Scallop): List[Option[CliOption]]", "member" : "org.rogach.scallop.ScallopHelpFormatter.getMainOptionLines", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getMainOptionLines(s:org.rogach.scallop.Scallop):List[Option[org.rogach.scallop.CliOption]]", "kind" : "def"}, {"label" : "getOptionLines", "tail" : "(s: Scallop): List[Option[CliOption]]", "member" : "org.rogach.scallop.ScallopHelpFormatter.getOptionLines", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getOptionLines(s:org.rogach.scallop.Scallop):List[Option[org.rogach.scallop.CliOption]]", "kind" : "def"}, {"label" : "getOptionsHelp", "tail" : "(s: Scallop): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.getOptionsHelp", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getOptionsHelp(s:org.rogach.scallop.Scallop):String", "kind" : "def"}, {"label" : "formatHelp", "tail" : "(s: Scallop, subcommandPrefix: String): String", "member" : "org.rogach.scallop.ScallopHelpFormatter.formatHelp", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#formatHelp(s:org.rogach.scallop.Scallop,subcommandPrefix:String):String", "kind" : "def"}, {"member" : "org.rogach.scallop.ScallopHelpFormatter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ScallopHelpFormatter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/ScallopHelpFormatter.html", "kind" : "class"}, {"name" : "org.rogach.scallop.ScallopOption", "shortDescription" : "A class to hold a reference to not-yet-computed option values.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopOption.toString", "link" : "org\/rogach\/scallop\/ScallopOption.html#toString():String", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopOption.isEmpty", "link" : "org\/rogach\/scallop\/ScallopOption.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "isDefined", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopOption.isDefined", "link" : "org\/rogach\/scallop\/ScallopOption.html#isDefined:Boolean", "kind" : "def"}, {"label" : "orElse", "tail" : "(alternative: => Option[B]): ScallopOption[B]", "member" : "org.rogach.scallop.ScallopOption.orElse", "link" : "org\/rogach\/scallop\/ScallopOption.html#orElse[B>:A](alternative:=>Option[B]):org.rogach.scallop.ScallopOption[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => ScallopOption[B]): ScallopOption[B]", "member" : "org.rogach.scallop.ScallopOption.flatMap", "link" : "org\/rogach\/scallop\/ScallopOption.html#flatMap[B](f:A=>org.rogach.scallop.ScallopOption[B]):org.rogach.scallop.ScallopOption[B]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => Unit): Unit", "member" : "org.rogach.scallop.ScallopOption.foreach", "link" : "org\/rogach\/scallop\/ScallopOption.html#foreach(f:A=>Unit):Unit", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): ScallopOption[B]", "member" : "org.rogach.scallop.ScallopOption.map", "link" : "org\/rogach\/scallop\/ScallopOption.html#map[B](f:A=>B):org.rogach.scallop.ScallopOption[B]", "kind" : "def"}, {"label" : "WithFilter", "tail" : "", "member" : "org.rogach.scallop.ScallopOption.WithFilter", "link" : "org\/rogach\/scallop\/ScallopOption.html#WithFilterextendsAnyRef", "kind" : "class"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): WithFilter", "member" : "org.rogach.scallop.ScallopOption.withFilter", "link" : "org\/rogach\/scallop\/ScallopOption.html#withFilter(p:A=>Boolean):ScallopOption.this.WithFilter", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopOption.filterNot", "link" : "org\/rogach\/scallop\/ScallopOption.html#filterNot(p:A=>Boolean):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopOption.filter", "link" : "org\/rogach\/scallop\/ScallopOption.html#filter(p:A=>Boolean):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): ScallopOption[B]", "member" : "org.rogach.scallop.ScallopOption.collect", "link" : "org\/rogach\/scallop\/ScallopOption.html#collect[B](pf:PartialFunction[A,B]):org.rogach.scallop.ScallopOption[B]", "kind" : "def"}, {"label" : "isSupplied", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopOption.isSupplied", "link" : "org\/rogach\/scallop\/ScallopOption.html#isSupplied:Boolean", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(default: => A): A", "member" : "org.rogach.scallop.ScallopOption.getOrElse", "link" : "org\/rogach\/scallop\/ScallopOption.html#getOrElse(default:=>A):A", "kind" : "def"}, {"label" : "apply", "tail" : "(): A", "member" : "org.rogach.scallop.ScallopOption.apply", "link" : "org\/rogach\/scallop\/ScallopOption.html#apply():A", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[A]", "member" : "org.rogach.scallop.ScallopOption.toOption", "link" : "org\/rogach\/scallop\/ScallopOption.html#toOption:Option[A]", "kind" : "def"}, {"label" : "get", "tail" : "(): Option[A]", "member" : "org.rogach.scallop.ScallopOption.get", "link" : "org\/rogach\/scallop\/ScallopOption.html#get:Option[A]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopOption.name", "link" : "org\/rogach\/scallop\/ScallopOption.html#name:String", "kind" : "def"}, {"label" : "supplied", "tail" : ": (String) => Boolean", "member" : "org.rogach.scallop.ScallopOption.supplied", "link" : "org\/rogach\/scallop\/ScallopOption.html#supplied:String=>Boolean", "kind" : "lazy val"}, {"label" : "fn", "tail" : ": (String) => Option[A]", "member" : "org.rogach.scallop.ScallopOption.fn", "link" : "org\/rogach\/scallop\/ScallopOption.html#fn:String=>Option[A]", "kind" : "lazy val"}, {"member" : "org.rogach.scallop.ScallopOption#<init>", "error" : "unsupported entity"}, {"label" : "_transformCount", "tail" : ": Int", "member" : "org.rogach.scallop.ScallopOption._transformCount", "link" : "org\/rogach\/scallop\/ScallopOption.html#_transformCount:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ScallopOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ScallopOption.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ScallopOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ScallopOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ScallopOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ScallopOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ScallopOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ScallopOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ScallopOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ScallopOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ScallopOption.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ScallopOption.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ScallopOption.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ScallopOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ScallopOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ScallopOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/ScallopOption.html", "kind" : "class"}, {"name" : "org.rogach.scallop.Serialization", "trait" : "org\/rogach\/scallop\/Serialization.html", "kind" : "trait", "members_trait" : [{"label" : "writeReplace", "tail" : "(): AnyRef", "member" : "org.rogach.scallop.Serialization.writeReplace", "link" : "org\/rogach\/scallop\/Serialization.html#writeReplace():AnyRef", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Serialization.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Serialization.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Serialization.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Serialization.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Serialization.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Serialization.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Serialization.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Serialization.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Serialization.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Serialization.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Serialization.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Serialization.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/Serialization.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Serialization.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/Serialization.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/Serialization.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Serialization.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Serialization.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Serialization.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Use this trait to make your ScallopConf serializable."}, {"name" : "org.rogach.scallop.SerializationProxy", "shortDescription" : "", "members_class" : [{"member" : "org.rogach.scallop.SerializationProxy#<init>", "error" : "unsupported entity"}, {"label" : "confClassName", "tail" : ": String", "member" : "org.rogach.scallop.SerializationProxy.confClassName", "link" : "org\/rogach\/scallop\/SerializationProxy.html#confClassName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/SerializationProxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/SerializationProxy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/SerializationProxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/SerializationProxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/SerializationProxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/SerializationProxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/SerializationProxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/SerializationProxy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/SerializationProxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/SerializationProxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/SerializationProxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/SerializationProxy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/SerializationProxy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/SerializationProxy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/SerializationProxy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/SerializationProxy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/SerializationProxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/SerializationProxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/SerializationProxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/SerializationProxy.html", "kind" : "class"}, {"name" : "org.rogach.scallop.SimpleOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[HelpInfo]", "member" : "org.rogach.scallop.SimpleOption.helpInfo", "link" : "org\/rogach\/scallop\/SimpleOption.html#helpInfo(sh:List[Char]):List[org.rogach.scallop.HelpInfo]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.SimpleOption.argLine", "link" : "org\/rogach\/scallop\/SimpleOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.SimpleOption.requiredShortNames", "link" : "org\/rogach\/scallop\/SimpleOption.html#requiredShortNames:List[Char]", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.SimpleOption.shortNames", "link" : "org\/rogach\/scallop\/SimpleOption.html#shortNames:List[Char]", "kind" : "def"}, {"label" : "longNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.SimpleOption.longNames", "link" : "org\/rogach\/scallop\/SimpleOption.html#longNames:List[String]", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.SimpleOption.isPositional", "link" : "org\/rogach\/scallop\/SimpleOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.SimpleOption#<init>", "error" : "unsupported entity"}, {"label" : "noshort", "tail" : ": Boolean", "member" : "org.rogach.scallop.SimpleOption.noshort", "link" : "org\/rogach\/scallop\/SimpleOption.html#noshort:Boolean", "kind" : "val"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.SimpleOption.hidden", "link" : "org\/rogach\/scallop\/SimpleOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "argName", "tail" : ": String", "member" : "org.rogach.scallop.SimpleOption.argName", "link" : "org\/rogach\/scallop\/SimpleOption.html#argName:String", "kind" : "val"}, {"label" : "validator", "tail" : ": (Any) => Boolean", "member" : "org.rogach.scallop.SimpleOption.validator", "link" : "org\/rogach\/scallop\/SimpleOption.html#validator:Any=>Boolean", "kind" : "val"}, {"label" : "default", "tail" : ": () => Option[Any]", "member" : "org.rogach.scallop.SimpleOption.default", "link" : "org\/rogach\/scallop\/SimpleOption.html#default:()=>Option[Any]", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[_]", "member" : "org.rogach.scallop.SimpleOption.converter", "link" : "org\/rogach\/scallop\/SimpleOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "val"}, {"label" : "required", "tail" : ": Boolean", "member" : "org.rogach.scallop.SimpleOption.required", "link" : "org\/rogach\/scallop\/SimpleOption.html#required:Boolean", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.SimpleOption.descr", "link" : "org\/rogach\/scallop\/SimpleOption.html#descr:String", "kind" : "val"}, {"label" : "short", "tail" : ": Option[Char]", "member" : "org.rogach.scallop.SimpleOption.short", "link" : "org\/rogach\/scallop\/SimpleOption.html#short:Option[Char]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.SimpleOption.name", "link" : "org\/rogach\/scallop\/SimpleOption.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/SimpleOption.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/SimpleOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/SimpleOption.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/SimpleOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/SimpleOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/SimpleOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/SimpleOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/SimpleOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/SimpleOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/SimpleOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/SimpleOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/SimpleOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/SimpleOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/SimpleOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/SimpleOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/SimpleOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/SimpleOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/SimpleOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.Subcommand", "shortDescription" : "", "members_class" : [{"label" : "descr", "tail" : "(d: String): Unit", "member" : "org.rogach.scallop.Subcommand.descr", "link" : "org\/rogach\/scallop\/Subcommand.html#descr(d:String):Unit", "kind" : "def"}, {"member" : "org.rogach.scallop.Subcommand#<init>", "error" : "unsupported entity"}, {"label" : "performOptionNameGuessing", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConf.performOptionNameGuessing", "link" : "org\/rogach\/scallop\/Subcommand.html#performOptionNameGuessing():Unit", "kind" : "def"}, {"label" : "guessOptionName_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConf.guessOptionName_=", "link" : "org\/rogach\/scallop\/Subcommand.html#guessOptionName_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "guessOptionName", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConf.guessOptionName", "link" : "org\/rogach\/scallop\/Subcommand.html#guessOptionName:Boolean", "kind" : "def"}, {"label" : "optionNameGuessingSupported", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConf.optionNameGuessingSupported", "link" : "org\/rogach\/scallop\/Subcommand.html#optionNameGuessingSupported:Boolean", "kind" : "def"}, {"label" : "verify", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.verify", "link" : "org\/rogach\/scallop\/Subcommand.html#verify():Unit", "kind" : "def"}, {"label" : "verifyConf", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.verifyConf", "link" : "org\/rogach\/scallop\/Subcommand.html#verifyConf():Unit", "kind" : "def"}, {"label" : "shortSubcommandsHelp", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConfBase.shortSubcommandsHelp", "link" : "org\/rogach\/scallop\/Subcommand.html#shortSubcommandsHelp(v:Boolean):Unit", "kind" : "def"}, {"label" : "helpWidth", "tail" : "(w: Int): Unit", "member" : "org.rogach.scallop.ScallopConfBase.helpWidth", "link" : "org\/rogach\/scallop\/Subcommand.html#helpWidth(w:Int):Unit", "kind" : "def"}, {"label" : "footer", "tail" : "(f: String): Unit", "member" : "org.rogach.scallop.ScallopConfBase.footer", "link" : "org\/rogach\/scallop\/Subcommand.html#footer(f:String):Unit", "kind" : "def"}, {"label" : "banner", "tail" : "(b: String): Unit", "member" : "org.rogach.scallop.ScallopConfBase.banner", "link" : "org\/rogach\/scallop\/Subcommand.html#banner(b:String):Unit", "kind" : "def"}, {"label" : "version", "tail" : "(v: String): Unit", "member" : "org.rogach.scallop.ScallopConfBase.version", "link" : "org\/rogach\/scallop\/Subcommand.html#version(v:String):Unit", "kind" : "def"}, {"label" : "printHelp", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.printHelp", "link" : "org\/rogach\/scallop\/Subcommand.html#printHelp():Unit", "kind" : "def"}, {"label" : "filteredSummary", "tail" : "(blurred: Set[String]): String", "member" : "org.rogach.scallop.ScallopConfBase.filteredSummary", "link" : "org\/rogach\/scallop\/Subcommand.html#filteredSummary(blurred:Set[String]):String", "kind" : "def"}, {"label" : "summary", "tail" : "(): String", "member" : "org.rogach.scallop.ScallopConfBase.summary", "link" : "org\/rogach\/scallop\/Subcommand.html#summary:String", "kind" : "def"}, {"label" : "requireSubcommand", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.requireSubcommand", "link" : "org\/rogach\/scallop\/Subcommand.html#requireSubcommand():Unit", "kind" : "def"}, {"label" : "validatePathsIsFile", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsIsFile", "link" : "org\/rogach\/scallop\/Subcommand.html#validatePathsIsFile(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathsIsDirectory", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsIsDirectory", "link" : "org\/rogach\/scallop\/Subcommand.html#validatePathsIsDirectory(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathsDoesNotExist", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsDoesNotExist", "link" : "org\/rogach\/scallop\/Subcommand.html#validatePathsDoesNotExist(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathsExists", "tail" : "(pathsOption: ScallopOption[List[Path]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathsExists", "link" : "org\/rogach\/scallop\/Subcommand.html#validatePathsExists(pathsOption:org.rogach.scallop.ScallopOption[List[java.nio.file.Path]]):Unit", "kind" : "def"}, {"label" : "validatePathIsFile", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathIsFile", "link" : "org\/rogach\/scallop\/Subcommand.html#validatePathIsFile(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validatePathIsDirectory", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathIsDirectory", "link" : "org\/rogach\/scallop\/Subcommand.html#validatePathIsDirectory(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validatePathDoesNotExist", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathDoesNotExist", "link" : "org\/rogach\/scallop\/Subcommand.html#validatePathDoesNotExist(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validatePathExists", "tail" : "(pathOption: ScallopOption[Path]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validatePathExists", "link" : "org\/rogach\/scallop\/Subcommand.html#validatePathExists(pathOption:org.rogach.scallop.ScallopOption[java.nio.file.Path]):Unit", "kind" : "def"}, {"label" : "validateFilesIsFile", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesIsFile", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFilesIsFile(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFilesIsDirectory", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesIsDirectory", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFilesIsDirectory(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFilesDoNotExist", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesDoNotExist", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFilesDoNotExist(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFilesExist", "tail" : "(filesOption: ScallopOption[List[File]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFilesExist", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFilesExist(filesOption:org.rogach.scallop.ScallopOption[List[java.io.File]]):Unit", "kind" : "def"}, {"label" : "validateFileIsFile", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileIsFile", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFileIsFile(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileIsDirectory", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileIsDirectory", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFileIsDirectory(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileDoesNotExist", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileDoesNotExist", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFileDoesNotExist(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "validateFileExists", "tail" : "(fileOption: ScallopOption[File]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.validateFileExists", "link" : "org\/rogach\/scallop\/Subcommand.html#validateFileExists(fileOption:org.rogach.scallop.ScallopOption[java.io.File]):Unit", "kind" : "def"}, {"label" : "allDefinedOrUndefined", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.allDefinedOrUndefined", "link" : "org\/rogach\/scallop\/Subcommand.html#allDefinedOrUndefined(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "codependent", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.codependent", "link" : "org\/rogach\/scallop\/Subcommand.html#codependent(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "mutuallyExclusive", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.mutuallyExclusive", "link" : "org\/rogach\/scallop\/Subcommand.html#mutuallyExclusive(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.requireOne", "link" : "org\/rogach\/scallop\/Subcommand.html#requireOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "requireAtLeastOne", "tail" : "(list: ScallopOption[_]*): Unit", "member" : "org.rogach.scallop.ScallopConfBase.requireAtLeastOne", "link" : "org\/rogach\/scallop\/Subcommand.html#requireAtLeastOne(list:org.rogach.scallop.ScallopOption[_]*):Unit", "kind" : "def"}, {"label" : "conflicts", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.conflicts", "link" : "org\/rogach\/scallop\/Subcommand.html#conflicts(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAll", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.dependsOnAll", "link" : "org\/rogach\/scallop\/Subcommand.html#dependsOnAll(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "dependsOnAny", "tail" : "(opt: ScallopOption[_], list: List[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.dependsOnAny", "link" : "org\/rogach\/scallop\/Subcommand.html#dependsOnAny(opt:org.rogach.scallop.ScallopOption[_],list:List[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "addValidation", "tail" : "(fn: => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.addValidation", "link" : "org\/rogach\/scallop\/Subcommand.html#addValidation(fn:=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "assertVerified", "tail" : "(): Unit", "member" : "org.rogach.scallop.ScallopConfBase.assertVerified", "link" : "org\/rogach\/scallop\/Subcommand.html#assertVerified():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(e: Throwable): Unit", "member" : "org.rogach.scallop.ScallopConfBase.onError", "link" : "org\/rogach\/scallop\/Subcommand.html#onError(e:Throwable):Unit", "kind" : "def"}, {"label" : "errorMessageHandler", "tail" : ": (String) => Unit", "member" : "org.rogach.scallop.ScallopConfBase.errorMessageHandler", "link" : "org\/rogach\/scallop\/Subcommand.html#errorMessageHandler:String=>Unit", "kind" : "var"}, {"label" : "printedName", "tail" : ": String", "member" : "org.rogach.scallop.ScallopConfBase.printedName", "link" : "org\/rogach\/scallop\/Subcommand.html#printedName:String", "kind" : "var"}, {"label" : "toggle", "tail" : "(name: String, default: => Option[Boolean], short: Char, noshort: Boolean, prefix: String, descrYes: String, descrNo: String, hidden: Boolean): ScallopOption[Boolean]", "member" : "org.rogach.scallop.ScallopConfBase.toggle", "link" : "org\/rogach\/scallop\/Subcommand.html#toggle(name:String,default:=>Option[Boolean],short:Char,noshort:Boolean,prefix:String,descrYes:String,descrNo:String,hidden:Boolean):org.rogach.scallop.ScallopOption[Boolean]", "kind" : "def"}, {"label" : "number", "tail" : "(name: String, descr: String, validate: (Long) => Boolean, required: Boolean, default: => Option[Long], hidden: Boolean)(conv: ValueConverter[Long]): ScallopOption[Long]", "member" : "org.rogach.scallop.ScallopConfBase.number", "link" : "org\/rogach\/scallop\/Subcommand.html#number(name:String,descr:String,validate:Long=>Boolean,required:Boolean,default:=>Option[Long],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Long]):org.rogach.scallop.ScallopOption[Long]", "kind" : "def"}, {"label" : "trailArg", "tail" : "(name: String, descr: String, validate: (A) => Boolean, required: Boolean, default: => Option[A], hidden: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConfBase.trailArg", "link" : "org\/rogach\/scallop\/Subcommand.html#trailArg[A](name:String,descr:String,validate:A=>Boolean,required:Boolean,default:=>Option[A],hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "propsLong", "tail" : "(name: String, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConfBase.propsLong", "link" : "org\/rogach\/scallop\/Subcommand.html#propsLong[A](name:String,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "props", "tail" : "(name: Char, descr: String, keyName: String, valueName: String, hidden: Boolean)(conv: ValueConverter[Map[String, A]]): Map[String, A]", "member" : "org.rogach.scallop.ScallopConfBase.props", "link" : "org\/rogach\/scallop\/Subcommand.html#props[A](name:Char,descr:String,keyName:String,valueName:String,hidden:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[Map[String,A]]):Map[String,A]", "kind" : "def"}, {"label" : "tally", "tail" : "(name: String, short: Char, descr: String, hidden: Boolean, noshort: Boolean): ScallopOption[Int]", "member" : "org.rogach.scallop.ScallopConfBase.tally", "link" : "org\/rogach\/scallop\/Subcommand.html#tally(name:String,short:Char,descr:String,hidden:Boolean,noshort:Boolean):org.rogach.scallop.ScallopOption[Int]", "kind" : "def"}, {"label" : "mainOptions_=", "tail" : "(newMainOptions: => Seq[ScallopOption[_]]): Unit", "member" : "org.rogach.scallop.ScallopConfBase.mainOptions_=", "link" : "org\/rogach\/scallop\/Subcommand.html#mainOptions_=(newMainOptions:=>Seq[org.rogach.scallop.ScallopOption[_]]):Unit", "kind" : "def"}, {"label" : "mainOptions", "tail" : "(): Seq[String]", "member" : "org.rogach.scallop.ScallopConfBase.mainOptions", "link" : "org\/rogach\/scallop\/Subcommand.html#mainOptions:Seq[String]", "kind" : "def"}, {"label" : "choice", "tail" : "(choices: Seq[String], name: String, short: Char, descr: String, default: => Option[String], required: Boolean, argName: String, hidden: Boolean, noshort: Boolean): ScallopOption[String]", "member" : "org.rogach.scallop.ScallopConfBase.choice", "link" : "org\/rogach\/scallop\/Subcommand.html#choice(choices:Seq[String],name:String,short:Char,descr:String,default:=>Option[String],required:Boolean,argName:String,hidden:Boolean,noshort:Boolean):org.rogach.scallop.ScallopOption[String]", "kind" : "def"}, {"label" : "opt", "tail" : "(name: String, short: Char, descr: String, default: => Option[A], validate: (A) => Boolean, required: Boolean, argName: String, hidden: Boolean, noshort: Boolean)(conv: ValueConverter[A]): ScallopOption[A]", "member" : "org.rogach.scallop.ScallopConfBase.opt", "link" : "org\/rogach\/scallop\/Subcommand.html#opt[A](name:String,short:Char,descr:String,default:=>Option[A],validate:A=>Boolean,required:Boolean,argName:String,hidden:Boolean,noshort:Boolean)(implicitconv:org.rogach.scallop.ValueConverter[A]):org.rogach.scallop.ScallopOption[A]", "kind" : "def"}, {"label" : "verified", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConfBase.verified", "link" : "org\/rogach\/scallop\/Subcommand.html#verified:Boolean", "kind" : "var"}, {"label" : "subcommands", "tail" : "(): List[ScallopConfBase]", "member" : "org.rogach.scallop.ScallopConfBase.subcommands", "link" : "org\/rogach\/scallop\/Subcommand.html#subcommands:List[org.rogach.scallop.ScallopConfBase]", "kind" : "def"}, {"label" : "subcommand", "tail" : "(): Option[ScallopConfBase]", "member" : "org.rogach.scallop.ScallopConfBase.subcommand", "link" : "org\/rogach\/scallop\/Subcommand.html#subcommand:Option[org.rogach.scallop.ScallopConfBase]", "kind" : "def"}, {"label" : "noshort_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConfBase.noshort_=", "link" : "org\/rogach\/scallop\/Subcommand.html#noshort_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "noshort", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConfBase.noshort", "link" : "org\/rogach\/scallop\/Subcommand.html#noshort:Boolean", "kind" : "def"}, {"label" : "helpFormatter_=", "tail" : "(formatter: ScallopHelpFormatter): Unit", "member" : "org.rogach.scallop.ScallopConfBase.helpFormatter_=", "link" : "org\/rogach\/scallop\/Subcommand.html#helpFormatter_=(formatter:org.rogach.scallop.ScallopHelpFormatter):Unit", "kind" : "def"}, {"label" : "helpFormatter", "tail" : "(): ScallopHelpFormatter", "member" : "org.rogach.scallop.ScallopConfBase.helpFormatter", "link" : "org\/rogach\/scallop\/Subcommand.html#helpFormatter:org.rogach.scallop.ScallopHelpFormatter", "kind" : "def"}, {"label" : "appendDefaultToDescription_=", "tail" : "(v: Boolean): Unit", "member" : "org.rogach.scallop.ScallopConfBase.appendDefaultToDescription_=", "link" : "org\/rogach\/scallop\/Subcommand.html#appendDefaultToDescription_=(v:Boolean):Unit", "kind" : "def"}, {"label" : "appendDefaultToDescription", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ScallopConfBase.appendDefaultToDescription", "link" : "org\/rogach\/scallop\/Subcommand.html#appendDefaultToDescription:Boolean", "kind" : "def"}, {"label" : "_guessOptionName", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConfBase._guessOptionName", "link" : "org\/rogach\/scallop\/Subcommand.html#_guessOptionName:Boolean", "kind" : "var"}, {"label" : "editBuilder", "tail" : "(fn: (Scallop) => Scallop): Unit", "member" : "org.rogach.scallop.ScallopConfBase.editBuilder", "link" : "org\/rogach\/scallop\/Subcommand.html#editBuilder(fn:org.rogach.scallop.Scallop=>org.rogach.scallop.Scallop):Unit", "kind" : "def"}, {"label" : "builder", "tail" : ": Scallop", "member" : "org.rogach.scallop.ScallopConfBase.builder", "link" : "org\/rogach\/scallop\/Subcommand.html#builder:org.rogach.scallop.Scallop", "kind" : "var"}, {"label" : "addSubcommand", "tail" : "(conf: Subcommand): Unit", "member" : "org.rogach.scallop.ScallopConfBase.addSubcommand", "link" : "org\/rogach\/scallop\/Subcommand.html#addSubcommand(conf:org.rogach.scallop.Subcommand):Unit", "kind" : "def"}, {"label" : "subconfigs", "tail" : ": Seq[ScallopConfBase]", "member" : "org.rogach.scallop.ScallopConfBase.subconfigs", "link" : "org\/rogach\/scallop\/Subcommand.html#subconfigs:Seq[org.rogach.scallop.ScallopConfBase]", "kind" : "var"}, {"label" : "isRootConfig", "tail" : ": Boolean", "member" : "org.rogach.scallop.ScallopConfBase.isRootConfig", "link" : "org\/rogach\/scallop\/Subcommand.html#isRootConfig:Boolean", "kind" : "var"}, {"label" : "parentConfig", "tail" : ": ScallopConfBase", "member" : "org.rogach.scallop.ScallopConfBase.parentConfig", "link" : "org\/rogach\/scallop\/Subcommand.html#parentConfig:org.rogach.scallop.ScallopConfBase", "kind" : "var"}, {"label" : "commandNameAndAliases", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConfBase.commandNameAndAliases", "link" : "org\/rogach\/scallop\/Subcommand.html#commandNameAndAliases:Seq[String]", "kind" : "val"}, {"label" : "args", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.ScallopConfBase.args", "link" : "org\/rogach\/scallop\/Subcommand.html#args:scala.collection.Seq[String]", "kind" : "val"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21], Option[A22]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21],Option[A22])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20], Option[A21]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20],Option[A21])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19], Option[A20]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19],Option[A20])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18], Option[A19]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18],Option[A19])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17], Option[A18]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17],Option[A18])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16], Option[A17]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16],Option[A17])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15], Option[A16]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15],Option[A16])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14], Option[A15]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14],Option[A15])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13], Option[A14]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13],Option[A14])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12], Option[A13]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12],Option[A13])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11], Option[A12]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11],Option[A12])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10], Option[A11]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10],Option[A11])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9], Option[A10]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9],Option[A10])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8], Option[A9]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8],Option[A9])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7], Option[A8]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7],Option[A8])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6], Option[A7]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6],Option[A7])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5], Option[A6]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5],Option[A6])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (Option[A1], Option[A2], Option[A3], Option[A4], Option[A5]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(Option[A1],Option[A2],Option[A3],Option[A4],Option[A5])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (Option[A1], Option[A2], Option[A3], Option[A4]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(Option[A1],Option[A2],Option[A3],Option[A4])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (Option[A1], Option[A2], Option[A3]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(Option[A1],Option[A2],Option[A3])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (Option[A1], Option[A2]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(Option[A1],Option[A2])=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validateOpt", "tail" : "(o1: ScallopOption[A1])(fn: (Option[A1]) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validateOpt", "link" : "org\/rogach\/scallop\/Subcommand.html#validateOpt[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:Option[A1]=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21], o22: ScallopOption[A22])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21],o22:org.rogach.scallop.ScallopOption[A22])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20], o21: ScallopOption[A21])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20],o21:org.rogach.scallop.ScallopOption[A21])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19], o20: ScallopOption[A20])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19],o20:org.rogach.scallop.ScallopOption[A20])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18], o19: ScallopOption[A19])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18],o19:org.rogach.scallop.ScallopOption[A19])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17], o18: ScallopOption[A18])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17],o18:org.rogach.scallop.ScallopOption[A18])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16], o17: ScallopOption[A17])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16],o17:org.rogach.scallop.ScallopOption[A17])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15], o16: ScallopOption[A16])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15],o16:org.rogach.scallop.ScallopOption[A16])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14], o15: ScallopOption[A15])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14],o15:org.rogach.scallop.ScallopOption[A15])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13], o14: ScallopOption[A14])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13],o14:org.rogach.scallop.ScallopOption[A14])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12], o13: ScallopOption[A13])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12],o13:org.rogach.scallop.ScallopOption[A13])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11], o12: ScallopOption[A12])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11],o12:org.rogach.scallop.ScallopOption[A12])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10], o11: ScallopOption[A11])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10],o11:org.rogach.scallop.ScallopOption[A11])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9], o10: ScallopOption[A10])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9],o10:org.rogach.scallop.ScallopOption[A10])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8], o9: ScallopOption[A9])(fn: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8,A9](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8],o9:org.rogach.scallop.ScallopOption[A9])(fn:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7], o8: ScallopOption[A8])(fn: (A1, A2, A3, A4, A5, A6, A7, A8) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7,A8](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7],o8:org.rogach.scallop.ScallopOption[A8])(fn:(A1,A2,A3,A4,A5,A6,A7,A8)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6], o7: ScallopOption[A7])(fn: (A1, A2, A3, A4, A5, A6, A7) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6,A7](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6],o7:org.rogach.scallop.ScallopOption[A7])(fn:(A1,A2,A3,A4,A5,A6,A7)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5], o6: ScallopOption[A6])(fn: (A1, A2, A3, A4, A5, A6) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5,A6](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5],o6:org.rogach.scallop.ScallopOption[A6])(fn:(A1,A2,A3,A4,A5,A6)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4], o5: ScallopOption[A5])(fn: (A1, A2, A3, A4, A5) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4,A5](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4],o5:org.rogach.scallop.ScallopOption[A5])(fn:(A1,A2,A3,A4,A5)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3], o4: ScallopOption[A4])(fn: (A1, A2, A3, A4) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3,A4](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3],o4:org.rogach.scallop.ScallopOption[A4])(fn:(A1,A2,A3,A4)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2], o3: ScallopOption[A3])(fn: (A1, A2, A3) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2,A3](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2],o3:org.rogach.scallop.ScallopOption[A3])(fn:(A1,A2,A3)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1], o2: ScallopOption[A2])(fn: (A1, A2) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1,A2](o1:org.rogach.scallop.ScallopOption[A1],o2:org.rogach.scallop.ScallopOption[A2])(fn:(A1,A2)=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(o1: ScallopOption[A1])(fn: (A1) => Either[String, Unit]): Unit", "member" : "org.rogach.scallop.ScallopConfValidations.validate", "link" : "org\/rogach\/scallop\/Subcommand.html#validate[A1](o1:org.rogach.scallop.ScallopOption[A1])(fn:A1=>Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "validations", "tail" : ": List[() => Either[String, Unit]]", "member" : "org.rogach.scallop.ScallopConfValidations.validations", "link" : "org\/rogach\/scallop\/Subcommand.html#validations:List[()=>Either[String,Unit]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Subcommand.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Subcommand.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Subcommand.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Subcommand.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Subcommand.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Subcommand.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Subcommand.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Subcommand.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Subcommand.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Subcommand.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Subcommand.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Subcommand.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/Subcommand.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Subcommand.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/Subcommand.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/Subcommand.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Subcommand.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Subcommand.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Subcommand.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/Subcommand.html", "kind" : "class"}, {"name" : "org.rogach.scallop.throwError", "shortDescription" : "Convenience variable to permit testing.", "object" : "org\/rogach\/scallop\/throwError$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.util.DynamicVariable.toString", "link" : "org\/rogach\/scallop\/throwError$.html#toString():String", "kind" : "def"}, {"label" : "value_=", "tail" : "(newval: Boolean): Unit", "member" : "scala.util.DynamicVariable.value_=", "link" : "org\/rogach\/scallop\/throwError$.html#value_=(newval:T):Unit", "kind" : "def"}, {"label" : "withValue", "tail" : "(newval: Boolean)(thunk: => S): S", "member" : "scala.util.DynamicVariable.withValue", "link" : "org\/rogach\/scallop\/throwError$.html#withValue[S](newval:T)(thunk:=>S):S", "kind" : "def"}, {"label" : "value", "tail" : "(): Boolean", "member" : "scala.util.DynamicVariable.value", "link" : "org\/rogach\/scallop\/throwError$.html#value:T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/throwError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/throwError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/throwError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/throwError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/throwError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/throwError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/throwError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/throwError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/throwError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/throwError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/throwError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/throwError$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/throwError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/throwError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/throwError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/throwError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/throwError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/throwError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.ToggleOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[HelpInfo]", "member" : "org.rogach.scallop.ToggleOption.helpInfo", "link" : "org\/rogach\/scallop\/ToggleOption.html#helpInfo(sh:List[Char]):List[org.rogach.scallop.HelpInfo]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.ToggleOption.argLine", "link" : "org\/rogach\/scallop\/ToggleOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "converter", "tail" : "(): ValueConverter[Boolean]", "member" : "org.rogach.scallop.ToggleOption.converter", "link" : "org\/rogach\/scallop\/ToggleOption.html#converter:org.rogach.scallop.ValueConverter[Boolean]", "kind" : "def"}, {"label" : "longNames", "tail" : "(): List[String]", "member" : "org.rogach.scallop.ToggleOption.longNames", "link" : "org\/rogach\/scallop\/ToggleOption.html#longNames:List[String]", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.ToggleOption.requiredShortNames", "link" : "org\/rogach\/scallop\/ToggleOption.html#requiredShortNames:List[Char]", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): List[Char]", "member" : "org.rogach.scallop.ToggleOption.shortNames", "link" : "org\/rogach\/scallop\/ToggleOption.html#shortNames:List[Char]", "kind" : "def"}, {"label" : "required", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ToggleOption.required", "link" : "org\/rogach\/scallop\/ToggleOption.html#required:Boolean", "kind" : "def"}, {"label" : "validator", "tail" : "(): (Any) => Boolean", "member" : "org.rogach.scallop.ToggleOption.validator", "link" : "org\/rogach\/scallop\/ToggleOption.html#validator:Any=>Boolean", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.ToggleOption.isPositional", "link" : "org\/rogach\/scallop\/ToggleOption.html#isPositional:Boolean", "kind" : "def"}, {"label" : "descr", "tail" : "(): String", "member" : "org.rogach.scallop.ToggleOption.descr", "link" : "org\/rogach\/scallop\/ToggleOption.html#descr:String", "kind" : "def"}, {"member" : "org.rogach.scallop.ToggleOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.ToggleOption.hidden", "link" : "org\/rogach\/scallop\/ToggleOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "descrNo", "tail" : ": String", "member" : "org.rogach.scallop.ToggleOption.descrNo", "link" : "org\/rogach\/scallop\/ToggleOption.html#descrNo:String", "kind" : "val"}, {"label" : "descrYes", "tail" : ": String", "member" : "org.rogach.scallop.ToggleOption.descrYes", "link" : "org\/rogach\/scallop\/ToggleOption.html#descrYes:String", "kind" : "val"}, {"label" : "prefix", "tail" : ": String", "member" : "org.rogach.scallop.ToggleOption.prefix", "link" : "org\/rogach\/scallop\/ToggleOption.html#prefix:String", "kind" : "val"}, {"label" : "noshort", "tail" : ": Boolean", "member" : "org.rogach.scallop.ToggleOption.noshort", "link" : "org\/rogach\/scallop\/ToggleOption.html#noshort:Boolean", "kind" : "val"}, {"label" : "short", "tail" : ": Option[Char]", "member" : "org.rogach.scallop.ToggleOption.short", "link" : "org\/rogach\/scallop\/ToggleOption.html#short:Option[Char]", "kind" : "val"}, {"label" : "default", "tail" : ": () => Option[Boolean]", "member" : "org.rogach.scallop.ToggleOption.default", "link" : "org\/rogach\/scallop\/ToggleOption.html#default:()=>Option[Boolean]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.ToggleOption.name", "link" : "org\/rogach\/scallop\/ToggleOption.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/ToggleOption.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ToggleOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ToggleOption.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ToggleOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ToggleOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ToggleOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ToggleOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ToggleOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ToggleOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ToggleOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ToggleOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ToggleOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ToggleOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ToggleOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ToggleOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ToggleOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ToggleOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/ToggleOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.TrailingArgsOption", "shortDescription" : "", "members_case class" : [{"label" : "helpInfo", "tail" : "(sh: List[Char]): List[HelpInfo]", "member" : "org.rogach.scallop.TrailingArgsOption.helpInfo", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#helpInfo(sh:List[Char]):List[org.rogach.scallop.HelpInfo]", "kind" : "def"}, {"label" : "argLine", "tail" : "(sh: List[Char]): String", "member" : "org.rogach.scallop.TrailingArgsOption.argLine", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#argLine(sh:List[Char]):String", "kind" : "def"}, {"label" : "requiredShortNames", "tail" : "(): Nil", "member" : "org.rogach.scallop.TrailingArgsOption.requiredShortNames", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#requiredShortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "shortNames", "tail" : "(): Nil", "member" : "org.rogach.scallop.TrailingArgsOption.shortNames", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#shortNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "longNames", "tail" : "(): Nil", "member" : "org.rogach.scallop.TrailingArgsOption.longNames", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#longNames:scala.collection.immutable.Nil.type", "kind" : "def"}, {"label" : "isPositional", "tail" : "(): Boolean", "member" : "org.rogach.scallop.TrailingArgsOption.isPositional", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#isPositional:Boolean", "kind" : "def"}, {"member" : "org.rogach.scallop.TrailingArgsOption#<init>", "error" : "unsupported entity"}, {"label" : "hidden", "tail" : ": Boolean", "member" : "org.rogach.scallop.TrailingArgsOption.hidden", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#hidden:Boolean", "kind" : "val"}, {"label" : "default", "tail" : ": () => Option[Any]", "member" : "org.rogach.scallop.TrailingArgsOption.default", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#default:()=>Option[Any]", "kind" : "val"}, {"label" : "validator", "tail" : ": (Any) => Boolean", "member" : "org.rogach.scallop.TrailingArgsOption.validator", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#validator:Any=>Boolean", "kind" : "val"}, {"label" : "converter", "tail" : ": ValueConverter[_]", "member" : "org.rogach.scallop.TrailingArgsOption.converter", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#converter:org.rogach.scallop.ValueConverter[_]", "kind" : "val"}, {"label" : "descr", "tail" : ": String", "member" : "org.rogach.scallop.TrailingArgsOption.descr", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#descr:String", "kind" : "val"}, {"label" : "required", "tail" : ": Boolean", "member" : "org.rogach.scallop.TrailingArgsOption.required", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#required:Boolean", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.TrailingArgsOption.name", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/TrailingArgsOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/TrailingArgsOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.TrailingArgumentsParser", "shortDescription" : "Parses the trailing arguments (including the arguments to last option).", "object" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html", "members_object" : [{"label" : "parse", "tail" : "(args: List[String], convs: List[(ValueConverter[_], String, Boolean)]): ParseResult", "member" : "org.rogach.scallop.TrailingArgumentsParser.parse", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#parse(args:List[String],convs:List[(org.rogach.scallop.ValueConverter[_],String,Boolean)]):org.rogach.scallop.TrailingArgumentsParser.ParseResult", "kind" : "def"}, {"label" : "ParseResult", "tail" : "", "member" : "org.rogach.scallop.TrailingArgumentsParser.ParseResult", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#ParseResultextendsOrdered[org.rogach.scallop.TrailingArgumentsParser.ParseResult]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/TrailingArgumentsParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.Util", "shortDescription" : "", "object" : "org\/rogach\/scallop\/Util$.html", "members_object" : [{"label" : "seqstr", "tail" : "(items: Seq[Any]): String", "member" : "org.rogach.scallop.Util.seqstr", "link" : "org\/rogach\/scallop\/Util$.html#seqstr(items:Seq[Any]):String", "kind" : "def"}, {"label" : "format", "tail" : "(formatString: String, args: Any*): String", "member" : "org.rogach.scallop.Util.format", "link" : "org\/rogach\/scallop\/Util$.html#format(formatString:String,args:Any*):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/Util$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/Util$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/Util$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/Util$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/Util$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/Util$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/Util$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Util$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Util$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/Util$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/Util$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/Util$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/Util$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/Util$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/Util$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/Util$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/Util$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/Util$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/Util$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.ValueConverter", "trait" : "org\/rogach\/scallop\/ValueConverter.html", "kind" : "trait", "members_trait" : [{"label" : "flatMap", "tail" : "(fn: (A) => Either[String, Option[B]]): ValueConverter[B]", "member" : "org.rogach.scallop.ValueConverter.flatMap", "link" : "org\/rogach\/scallop\/ValueConverter.html#flatMap[B](fn:A=>Either[String,Option[B]]):org.rogach.scallop.ValueConverter[B]", "kind" : "def"}, {"label" : "map", "tail" : "(fn: (A) => B): ValueConverter[B]", "member" : "org.rogach.scallop.ValueConverter.map", "link" : "org\/rogach\/scallop\/ValueConverter.html#map[B](fn:A=>B):org.rogach.scallop.ValueConverter[B]", "kind" : "def"}, {"label" : "argFormat", "tail" : "(name: String): String", "member" : "org.rogach.scallop.ValueConverter.argFormat", "link" : "org\/rogach\/scallop\/ValueConverter.html#argFormat(name:String):String", "kind" : "def"}, {"label" : "parseCached", "tail" : "(s: List[(String, List[String])]): Either[String, Option[A]]", "member" : "org.rogach.scallop.ValueConverter.parseCached", "link" : "org\/rogach\/scallop\/ValueConverter.html#parseCached(s:List[(String,List[String])]):Either[String,Option[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/ValueConverter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/ValueConverter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/ValueConverter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/ValueConverter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/ValueConverter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/ValueConverter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/ValueConverter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ValueConverter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ValueConverter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/ValueConverter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/ValueConverter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/ValueConverter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/ValueConverter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/ValueConverter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/ValueConverter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/ValueConverter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/ValueConverter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/ValueConverter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/ValueConverter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "argType", "tail" : ": V", "member" : "org.rogach.scallop.ValueConverter.argType", "link" : "org\/rogach\/scallop\/ValueConverter.html#argType:org.rogach.scallop.ArgType.V", "kind" : "abstract val"}, {"label" : "parse", "tail" : "(s: List[(String, List[String])]): Either[String, Option[A]]", "member" : "org.rogach.scallop.ValueConverter.parse", "link" : "org\/rogach\/scallop\/ValueConverter.html#parse(s:List[(String,List[String])]):Either[String,Option[A]]", "kind" : "abstract def"}], "shortDescription" : "Converter from list of plain strings to something meaningful."}], "org.rogach.scallop.exceptions" : [{"name" : "org.rogach.scallop.exceptions.ExcessArguments", "shortDescription" : "Thrown when user provides excess arguments that can't be matched by trailing arg options", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.ExcessArguments#<init>", "error" : "unsupported entity"}, {"label" : "args", "tail" : ": Seq[String]", "member" : "org.rogach.scallop.exceptions.ExcessArguments.args", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#args:Seq[String]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/ExcessArguments.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.Exit", "shortDescription" : "Extractor object, for matching on both Help and Version results.", "object" : "org\/rogach\/scallop\/exceptions\/Exit$.html", "members_object" : [{"label" : "unapply", "tail" : "(r: ScallopResult): Boolean", "member" : "org.rogach.scallop.exceptions.Exit.unapply", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#unapply(r:org.rogach.scallop.exceptions.ScallopResult):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Exit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.rogach.scallop.exceptions.GenericScallopException", "shortDescription" : "", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.GenericScallopException#<init>", "error" : "unsupported entity"}, {"label" : "msg", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.GenericScallopException.msg", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#msg:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/GenericScallopException.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.Help", "shortDescription" : "Thrown when user requested help output (via \"--help\")", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.Help#<init>", "error" : "unsupported entity"}, {"label" : "command", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.Help.command", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#command:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/Help.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Help.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/Help.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.IdenticalOptionNames", "shortDescription" : "Thrown when several options and\/or trailing arguments have identical names    in definition - making it impossible to distinguish between them.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.IdenticalOptionNames#<init>", "error" : "unsupported entity"}, {"label" : "mess", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.IdenticalOptionNames.mess", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#mess:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/IdenticalOptionNames.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.IllegalOptionParameters", "shortDescription" : "Thrown when user tried to create an option with some illegal parameters", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.IllegalOptionParameters#<init>", "error" : "unsupported entity"}, {"label" : "mess", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.IllegalOptionParameters.mess", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#mess:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/IllegalOptionParameters.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.IncompleteBuildException", "shortDescription" : "Thrown when user tried to extract the value of an option before the call    to verify in ScallopConf.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.IncompleteBuildException#<init>", "error" : "unsupported entity"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/IncompleteBuildException.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.MajorInternalException", "shortDescription" : "This is a special case of exception - the one you should never see.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.MajorInternalException#<init>", "error" : "unsupported entity"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/MajorInternalException.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.OptionNameGuessingFailure", "shortDescription" : "Thrown when option name guessing fails on one of the options.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.OptionNameGuessingFailure#<init>", "error" : "unsupported entity"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingFailure.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.OptionNameGuessingUnsupported", "shortDescription" : "Thrown when option name guessing is not available on the platform (currently JS and Native)", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.OptionNameGuessingUnsupported#<init>", "error" : "unsupported entity"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/OptionNameGuessingUnsupported.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.RequiredOptionNotFound", "shortDescription" : "Thrown when parser failed to find arguments to option (marked as 'required')    in the input arguments.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.RequiredOptionNotFound#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.RequiredOptionNotFound.name", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/RequiredOptionNotFound.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.ScallopException", "shortDescription" : "Parent class for all exceptions thrown from this library.", "object" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html", "members_class" : [{"member" : "org.rogach.scallop.exceptions.ScallopException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unapply", "tail" : "(e: ScallopException): Option[String]", "member" : "org.rogach.scallop.exceptions.ScallopException.unapply", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#unapply(e:org.rogach.scallop.exceptions.ScallopException):Option[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/rogach\/scallop\/exceptions\/ScallopException.html", "kind" : "class"}, {"name" : "org.rogach.scallop.exceptions.ScallopResult", "trait" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ScallopResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Parent trait for all not-positive results that can be resulted from this library (including help and exits)"}, {"name" : "org.rogach.scallop.exceptions.UnknownOption", "shortDescription" : "Thrown when user provides Scallop with unknown option name in the arguments    or requests unknown option result from parser.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.UnknownOption#<init>", "error" : "unsupported entity"}, {"label" : "optionName", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.UnknownOption.optionName", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#optionName:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/UnknownOption.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.ValidationFailure", "shortDescription" : "Thrown when the validation failed on some option.", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.ValidationFailure#<init>", "error" : "unsupported entity"}, {"label" : "mess", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ValidationFailure.mess", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#mess:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/ValidationFailure.html", "kind" : "case class"}, {"name" : "org.rogach.scallop.exceptions.Version", "case object" : "org\/rogach\/scallop\/exceptions\/Version$.html", "shortDescription" : "Thrown when user requested version printout (via \"--version\")", "members_case object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/Version$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "org.rogach.scallop.exceptions.WrongOptionFormat", "shortDescription" : "Thrown when arguments to some option do not satisfy that option's    value converter (it returns Left in such case).", "members_case class" : [{"member" : "org.rogach.scallop.exceptions.WrongOptionFormat#<init>", "error" : "unsupported entity"}, {"label" : "msg", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.WrongOptionFormat.msg", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#msg:String", "kind" : "val"}, {"label" : "args", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.WrongOptionFormat.args", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#args:String", "kind" : "val"}, {"label" : "optionName", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.WrongOptionFormat.optionName", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#optionName:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "org.rogach.scallop.exceptions.ScallopException.message", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/rogach\/scallop\/exceptions\/WrongOptionFormat.html", "kind" : "case class"}]};